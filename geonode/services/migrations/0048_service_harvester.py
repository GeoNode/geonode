# Generated by Django 3.2.4 on 2021-09-20 13:10

from django.contrib.auth import get_user_model
from django.db import migrations, models, transaction
import django.db.models.deletion
import logging
logger = logging.getLogger(__name__)


@transaction.atomic
def set_harvester(apps, _):
    from geonode.services import enumerations
    from geonode.services.models import Service
    from geonode.harvesting.models import Harvester

    try:
        MyModel = apps.get_model('services', 'Service')
        _services_with_empty_harvesters = MyModel.objects.filter(
            type__in=(enumerations.WMS, enumerations.GN_WMS),
            harvester__isnull=True)
        for _service in _services_with_empty_harvesters:
            service_harvester = Harvester.objects.create(
                name=_service.name,
                scheduling_enabled=False,
                default_owner=get_user_model().objects.get(id=_service.owner.id),
                remote_url=Service._get_service_url(_service),
                harvester_type=enumerations.HARVESTER_TYPES[_service.type]
            )
            MyModel.objects.filter(id=_service.id).update(harvester=service_harvester)
    except Exception as e:
        logger.error(f'Error during set set_harvester: {e.args[0]}')
        raise


class Migration(migrations.Migration):

    dependencies = [
        ('harvesting', '0036_alter_harvester_harvester_type'),
        ('services', '0046_auto_20210903_1427'),
    ]

    operations = [
        migrations.AddField(
            model_name='service',
            name='harvester',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='service_harvester', to='harvesting.harvester'),
        ),
        migrations.RunPython(set_harvester, migrations.RunPython.noop)
    ]
