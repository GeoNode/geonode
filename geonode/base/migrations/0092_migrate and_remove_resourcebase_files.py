# Generated by Django 4.2.9 on 2024-03-12 11:55
import logging
import os

from django.db import migrations
from django.db.models import Q
from django.conf import settings
from django.contrib.auth import get_user_model
from django.urls import reverse

from geonode.base.models import Link
from geonode.assets.models import LocalAsset
from geonode.utils import build_absolute_uri

logger = logging.getLogger(__name__)


def migrate_files(apps, schema_editor):

    def get_ext(filename):
        try:
            return os.path.splitext(filename)[1][1:]
        except Exception as e:
            logger.warning(f"Could not find extension for Resource '{res_hm.title}, file '{filename}': {e}")
            return None

    ResourceBase_hm = apps.get_model('base', 'ResourceBase')
    Dataset_hm = apps.get_model('layers', 'Dataset')
    Document_hm = apps.get_model('documents', 'Document')

    if hasattr(ResourceBase_hm, "files"):
        # looping on available resources with files to generate the LocalAssets
        for res_hm in ResourceBase_hm.objects.exclude(Q(files__isnull=True) | Q(files__exact=[])).iterator():
            # resolving the real owner instance, since resource.owner is an historical model and cant be used directly
            owner = get_user_model().objects.get(pk=res_hm.owner.id)
            # logger.warning(f"Creating ASSET for {resource.id} -- owner:{type(resource.owner)} --> {resource.owner}")

            files = res_hm.files
            # creating the local asset object
            asset = LocalAsset(
                title="Files",
                description="Original uploaded files",
                owner=owner,
                location=files
            )
            asset.save()

            ### creating the association between asset and Link

            # no existing "uploaded" links exist, so create them right away
            # otherwise we create the link with the assigned asset
            if dataset_hm := Dataset_hm.objects.filter(pk=res_hm.id).first():
                url = build_absolute_uri(reverse("assets-link", args=(asset.pk,)))
            elif doc_hm := Document_hm.objects.filter(pk=res_hm.id).first():
                url = build_absolute_uri(reverse("assets-link", args=(asset.pk,)))
            else:
                raise TypeError(f'ResourceBase {res_hm.id}::"{res_hm.title} has unhandled type"')

            if len(files) == 1:
                ext = get_ext(files[0])
            else:
                ext = None
                for file in files:
                    for filetype in settings.SUPPORTED_DATASET_FILE_TYPES:
                        file_ext = get_ext(file)
                        if file_ext in filetype["ext"]:
                            ext = filetype["id"]
                            break
                    if ext:
                        break

            Link.objects.create(
                resource_id=res_hm.id,
                asset=asset,
                link_type="uploaded",
                name="Original upload",
                extension=ext or "unknown",
                url=url
            )


class Migration(migrations.Migration):

    dependencies = [

        ("base", "0091_create_link_asset_alter_link_type"),
    ]

    operations = [
        migrations.RunPython(migrate_files, migrations.RunPython.noop),
        migrations.RemoveField(
            model_name="resourcebase",
            name="files",
        ),
    ]
