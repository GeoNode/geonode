# Generated by Django 3.2.16 on 2022-11-14 10:00

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('base', '0084_remove_comments_from_actions'),
    ]

    operations = [
        migrations.CreateModel(
            name='AlternateType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alternate_type', models.CharField(choices=[('Alternative', ''), ('Subtitle', ''), ('Translated', ''), ('Other', '')], help_text='Alternate title type', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='DescriptionType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description_type', models.CharField(choices=[('Methods', 'The methodology employed for the study or research'), ('SeriesInformation', 'Information about a repeating series, such as volumne, issue, number'), ('TableOfContents', 'A listing of the Table of Contents'), ('TechnicalInfo', 'Detailed information that may be associated with design, implementation, operation, use, and/or maintenance of a process or system'), ('other', 'Other description information that does not fit into an existing category')], help_text='abstract description type', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='FundingReference',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('funder_name', models.CharField(help_text='Name of the funding provider. (e.g. European Commission)', max_length=255)),
                ('funder_identifier', models.CharField(help_text='Uniquely identifies a funding entity, according to various types. (e.g. http://doi.org/10.13039/501100000780)', max_length=255)),
                ('funder_identifier_type', models.CharField(help_text='The type of the Identifier. (e.g. BMBF)', max_length=255)),
                ('award_number', models.CharField(help_text='The code assigned by the funder to a sponsored award (grant). (e.g. 282625)', max_length=255)),
                ('award_uri', models.CharField(help_text='The URI leading to a page provided by the funder for more information about the award (grant). (e.g. http://cordis.europa.eu/project/rcn/100180_en.html)', max_length=255)),
                ('award_title', models.CharField(help_text='The human readable title of the award (grant). (e.g. MOTivational strength of ecosystem services)', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='RelatedIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('related_identifier', models.CharField(help_text='Name of the funding provider. (e.g. European Commission)', max_length=255)),
                ('related_identifier_type', models.CharField(help_text='The type of the Related identifier. If Related identifier is used Identifier type is mandatory. (e.g. bibcode)', max_length=255)),
                ('relation_type', models.CharField(help_text='Description of the relationship of the resource being registered (A) and the related resource (B). If Related identifier is used Relation type is mandatory.', max_length=500)),
            ],
        ),
        migrations.AddField(
            model_name='resourcebase',
            name='abstract_de',
            field=models.TextField(blank=True, help_text='brief german narrative summary of the content of the resource(s)', max_length=2000, verbose_name='abstract_de'),
        ),
        migrations.AddField(
            model_name='resourcebase',
            name='parent_ressource',
            field=models.ForeignKey(blank=True, help_text='Parent Dataset, this dataset belongs to', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.resourcebase'),
        ),
        migrations.AddField(
            model_name='resourcebase',
            name='title_de',
            field=models.CharField(default='', help_text='german name by which the cited resource is known', max_length=255, verbose_name='title_de'),
        ),
        migrations.AddField(
            model_name='resourcebase',
            name='use_contraints',
            field=models.TextField(blank=True, help_text='This metadata element shall provide information on the Use constraints applied to assure the protection of privacy or intellectual property (e.g. Trademark)', max_length=2000, verbose_name='use_constraints'),
        ),
        migrations.AlterField(
            model_name='resourcebase',
            name='date_type',
            field=models.CharField(choices=[('publication', 'Publication')], default='publication', help_text='identification of when a given event occurred', max_length=255, verbose_name='date type'),
        ),
        migrations.AddField(
            model_name='resourcebase',
            name='alternate_type',
            field=models.ForeignKey(help_text='Type of the alternate field', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.alternatetype'),
        ),
        migrations.AddField(
            model_name='resourcebase',
            name='description_type',
            field=models.ForeignKey(help_text='Descripion Type of abstract.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.descriptiontype'),
        ),
        migrations.AddField(
            model_name='resourcebase',
            name='funding_reference',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.fundingreference'),
        ),
        migrations.AddField(
            model_name='resourcebase',
            name='related_identifier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.relatedidentifier'),
        ),
    ]
