{
  "author": {
    "name": "Felix Geisendörfer",
    "email": "felix@debuggable.com",
    "url": "http://debuggable.com/"
  },
  "name": "form-data",
  "description": "A library to create readable \"multipart/form-data\" streams. Can be used to submit forms and file uploads to other web applications.",
<<<<<<< HEAD
  "version": "1.0.0-rc3",
=======
  "version": "1.0.0-rc4",
>>>>>>> 1d4070b30cfeda37af9b48f913adaf75784c0535
  "repository": {
    "type": "git",
    "url": "git://github.com/form-data/form-data.git"
  },
  "main": "./lib/form_data",
  "browser": "./lib/browser",
  "scripts": {
<<<<<<< HEAD
    "test": "./test/run.js"
  },
  "pre-commit": [
    "test"
=======
    "pretest": "rimraf coverage test/tmp",
    "test": "istanbul cover --report none test/run.js",
    "posttest": "istanbul report",
    "lint": "eslint lib/*.js test/*.js test/**/*.js",
    "predebug": "rimraf coverage test/tmp",
    "debug": "verbose=1 ./test/run.js",
    "check": "istanbul check-coverage coverage/coverage*.json",
    "coverage": "codacy-coverage < ./coverage/lcov.info; true"
  },
  "pre-commit": [
    "lint",
    "test",
    "check"
>>>>>>> 1d4070b30cfeda37af9b48f913adaf75784c0535
  ],
  "engines": {
    "node": ">= 0.10"
  },
  "dependencies": {
<<<<<<< HEAD
    "async": "^1.4.0",
    "combined-stream": "^1.0.5",
    "mime-types": "^2.1.3"
  },
  "license": "MIT",
  "devDependencies": {
    "fake": "^0.2.2",
    "far": "^0.0.7",
    "formidable": "^1.0.17",
    "pre-commit": "^1.0.10",
    "request": "^2.60.0"
  },
  "readme": "# Form-Data [![Join the chat at https://gitter.im/form-data/form-data](http://form-data.github.io/images/gitterbadge.svg)](https://gitter.im/form-data/form-data) [![Build Status](https://img.shields.io/travis/form-data/form-data/master.svg)](https://travis-ci.org/form-data/form-data) [![Dependency Status](https://img.shields.io/david/form-data/form-data.svg)](https://david-dm.org/form-data/form-data)\n\nA library to create readable ```\"multipart/form-data\"``` streams. Can be used to submit forms and file uploads to other web applications.\n\nThe API of this library is inspired by the [XMLHttpRequest-2 FormData Interface][xhr2-fd].\n\n[xhr2-fd]: http://dev.w3.org/2006/webapi/XMLHttpRequest-2/Overview.html#the-formdata-interface\n[streams2-thing]: http://nodejs.org/api/stream.html#stream_compatibility_with_older_node_versions\n\n## Install\n\n```\nnpm install form-data\n```\n\n## Usage\n\nIn this example we are constructing a form with 3 fields that contain a string,\na buffer and a file stream.\n\n``` javascript\nvar FormData = require('form-data');\nvar fs = require('fs');\n\nvar form = new FormData();\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_file', fs.createReadStream('/foo/bar.jpg'));\n```\n\nAlso you can use http-response stream:\n\n``` javascript\nvar FormData = require('form-data');\nvar http = require('http');\n\nvar form = new FormData();\n\nhttp.request('http://nodejs.org/images/logo.png', function(response) {\n  form.append('my_field', 'my value');\n  form.append('my_buffer', new Buffer(10));\n  form.append('my_logo', response);\n});\n```\n\nOr @mikeal's [request](https://github.com/request/request) stream:\n\n``` javascript\nvar FormData = require('form-data');\nvar request = require('request');\n\nvar form = new FormData();\n\nform.append('my_field', 'my value');\nform.append('my_buffer', new Buffer(10));\nform.append('my_logo', request('http://nodejs.org/images/logo.png'));\n```\n\nIn order to submit this form to a web application, call ```submit(url, [callback])``` method:\n\n``` javascript\nform.submit('http://example.org/', function(err, res) {\n  // res – response object (http.IncomingMessage)  //\n  res.resume();\n});\n\n```\n\nFor more advanced request manipulations ```submit()``` method returns ```http.ClientRequest``` object, or you can choose from one of the alternative submission methods.\n\n### Alternative submission methods\n\nYou can use node's http client interface:\n\n``` javascript\nvar http = require('http');\n\nvar request = http.request({\n  method: 'post',\n  host: 'example.org',\n  path: '/upload',\n  headers: form.getHeaders()\n});\n\nform.pipe(request);\n\nrequest.on('response', function(res) {\n  console.log(res.statusCode);\n});\n```\n\nOr if you would prefer the `'Content-Length'` header to be set for you:\n\n``` javascript\nform.submit('example.org/upload', function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\nTo use custom headers and pre-known length in parts:\n\n``` javascript\nvar CRLF = '\\r\\n';\nvar form = new FormData();\n\nvar options = {\n  header: CRLF + '--' + form.getBoundary() + CRLF + 'X-Custom-Header: 123' + CRLF + CRLF,\n  knownLength: 1\n};\n\nform.append('my_buffer', buffer, options);\n\nform.submit('http://example.com/', function(err, res) {\n  if (err) throw err;\n  console.log('Done');\n});\n```\n\nForm-Data can recognize and fetch all the required information from common types of streams (```fs.readStream```, ```http.response``` and ```mikeal's request```), for some other types of streams you'd need to provide \"file\"-related information manually:\n\n``` javascript\nsomeModule.stream(function(err, stdout, stderr) {\n  if (err) throw err;\n\n  var form = new FormData();\n\n  form.append('file', stdout, {\n    filename: 'unicycle.jpg',\n    contentType: 'image/jpg',\n    knownLength: 19806\n  });\n\n  form.submit('http://example.com/', function(err, res) {\n    if (err) throw err;\n    console.log('Done');\n  });\n});\n```\n\nFor edge cases, like POST request to URL with query string or to pass HTTP auth credentials, object can be passed to `form.submit()` as first parameter:\n\n``` javascript\nform.submit({\n  host: 'example.com',\n  path: '/probably.php?extra=params',\n  auth: 'username:password'\n}, function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\nIn case you need to also send custom HTTP headers with the POST request, you can use the `headers` key in first parameter of `form.submit()`:\n\n``` javascript\nform.submit({\n  host: 'example.com',\n  path: '/surelynot.php',\n  headers: {'x-test-header': 'test-header-value'}\n}, function(err, res) {\n  console.log(res.statusCode);\n});\n```\n\n### Integration with other libraries\n\n#### Request\n\nForm submission using  [request](https://github.com/request/request):\n\n```javascript\nvar formData = {\n  my_field: 'my_value',\n  my_file: fs.createReadStream(__dirname + '/unicycle.jpg'),\n};\n\nrequest.post({url:'http://service.com/upload', formData: formData}, function(err, httpResponse, body) {\n  if (err) {\n    return console.error('upload failed:', err);\n  }\n  console.log('Upload successful!  Server responded with:', body);\n});\n```\n\nFor more details see [request readme](https://github.com/request/request#multipartform-data-multipart-form-uploads).\n\n#### node-fetch\n\nYou can also submit a form using [node-fetch](https://github.com/bitinn/node-fetch):\n\n```javascript\nvar form = new FormData();\n\nform.append('a', 1);\n\nfetch('http://example.com', { method: 'POST', body: form })\n    .then(function(res) {\n        return res.json();\n    }).then(function(json) {\n        console.log(json);\n    });\n```\n\n## Notes\n\n- ```getLengthSync()``` method DOESN'T calculate length for streams, use ```knownLength``` options as workaround.\n- If it feels like FormData hangs after submit and you're on ```node-0.10```, please check [Compatibility with Older Node Versions][streams2-thing]\n\n## License\n\nForm-Data is licensed under the MIT license.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/form-data/form-data/issues"
  },
  "_id": "form-data@1.0.0-rc3",
  "dist": {
    "shasum": "22687db2e679f51f99d5b362c7024fdfcc624b95"
  },
  "_from": "form-data@~1.0.0-rc3",
  "_resolved": "https://registry.npmjs.org/form-data/-/form-data-1.0.0-rc3.tgz"
=======
    "async": "^1.5.2",
    "combined-stream": "^1.0.5",
    "mime-types": "^2.1.10"
  },
  "license": "MIT",
  "devDependencies": {
    "codacy-coverage": "^1.1.3",
    "coveralls": "^2.11.8",
    "cross-spawn": "^2.1.5",
    "eslint": "^2.4.0",
    "fake": "^0.2.2",
    "far": "^0.0.7",
    "formidable": "^1.0.17",
    "istanbul": "^0.4.2",
    "pre-commit": "^1.1.2",
    "request": "^2.69.0",
    "rimraf": "^2.5.2"
  },
  "gitHead": "f73996e0508ee2d4b2b376276adfac1de4188ac2",
  "bugs": {
    "url": "https://github.com/form-data/form-data/issues"
  },
  "homepage": "https://github.com/form-data/form-data#readme",
  "_id": "form-data@1.0.0-rc4",
  "_shasum": "05ac6bc22227b43e4461f488161554699d4f8b5e",
  "_from": "form-data@~1.0.0-rc3",
  "_npmVersion": "2.14.9",
  "_nodeVersion": "0.12.11",
  "_npmUser": {
    "name": "alexindigo",
    "email": "iam@alexindigo.com"
  },
  "dist": {
    "shasum": "05ac6bc22227b43e4461f488161554699d4f8b5e",
    "tarball": "http://registry.npmjs.org/form-data/-/form-data-1.0.0-rc4.tgz"
  },
  "maintainers": [
    {
      "name": "felixge",
      "email": "felix@debuggable.com"
    },
    {
      "name": "idralyuk",
      "email": "igor@buran.us"
    },
    {
      "name": "alexindigo",
      "email": "iam@alexindigo.com"
    },
    {
      "name": "mikeal",
      "email": "mikeal.rogers@gmail.com"
    },
    {
      "name": "celer",
      "email": "dtyree77@gmail.com"
    },
    {
      "name": "dylanpiercey",
      "email": "pierceydylan@gmail.com"
    }
  ],
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/form-data-1.0.0-rc4.tgz_1458059747097_0.14101114077493548"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/form-data/-/form-data-1.0.0-rc4.tgz"
>>>>>>> 1d4070b30cfeda37af9b48f913adaf75784c0535
}
