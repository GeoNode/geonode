# Generated by Django 3.2.7 on 2021-11-18 18:02

from django.db import migrations
from django.db.models import Q

def set_maplayer_dataset(apps, schema_editor):
    MapLayer = apps.get_model("maps", "MapLayer")
    Dataset = apps.get_model("layers", "Dataset")

    for maplayer in MapLayer.objects.iterator():
        # Find the dataset
        dataset_queryset = Dataset.objects.filter(Q(alternate=maplayer.name) | Q(name=maplayer.name))
        if maplayer.local and maplayer.store:
            dataset_queryset = dataset_queryset.filter(store=maplayer.store)
        elif maplayer.ows_url:
            dataset_queryset = dataset_queryset.filter(remote_service__base_url=maplayer.ows_url)
        # Get and save the dataset relation
        try:
            maplayer.dataset = dataset_queryset.get()
        except Dataset.DoesNotExist:
            pass
        else:
            maplayer.save()


def reverse_maplayer_dataset(apps, schema_editor):
    MapLayer = apps.get_model("maps", "MapLayer")
    MapLayer.objects.all().update(dataset=None)


class Migration(migrations.Migration):

    dependencies = [
        ('maps', '0036_maplayer_dataset'),
    ]

    operations = [
        migrations.RunPython(set_maplayer_dataset, reverse_maplayer_dataset),
    ]
