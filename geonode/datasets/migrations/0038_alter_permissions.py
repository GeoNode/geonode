# Generated by Django 3.2.4 on 2021-07-14 13:37

from geonode.datasets.models import Dataset
from django.db import migrations, models, connection
from django.db.models import deletion
from django.db.migrations.state import ModelState

from django.db.migrations.operations.base import Operation

class FixUpMigrationState(Operation):

    # If this is False, it means that this operation will be ignored by
    # sqlmigrate; if true, it will be run and the SQL collected for its output.
    reduces_to_sql = False

    # If this is False, Django will refuse to reverse past this operation.
    reversible = False

    def __init__(self, arg1, arg2):
        # Operations are usually instantiated with arguments in migration
        # files. Store the values of them on self for later use.
        pass

    def state_forwards(self, app_label, state):
        # The Operation should take the 'state' parameter (an instance of
        # django.db.migrations.state.ProjectState) and mutate it to match
        # any schema changes that have occurred.
        x = ModelState.from_model(Dataset)
        state.add_model(x)
        return state

    def database_forwards(self, app_label, schema_editor, from_state, to_state):
        # The Operation should use schema_editor to apply any changes it
        # wants to make to the database.
        from_state.clear_delayed_apps_cache()

    def database_backwards(self, app_label, schema_editor, from_state, to_state):
        # If reversible is True, this is called when the operation is reversed.
        pass

    def describe(self):
        # This is used to describe what the operation does in console output.
        return "Custom Operation"

    @property
    def migration_name_fragment(self):
        # Optional. A filename part suitable for automatically naming a
        # migration containing this operation, or None if not applicable.
        return "custom_operation_%s_%s" % (self.arg1, self.arg2)


def alter_permissions(apps, schema_editor):
    try:
        from django.contrib.auth.models import Permission
        from django.contrib.contenttypes.models import ContentType
        layer_ctype = ContentType.objects.filter(app_label='layers', model='layer')
        dataset_ctype, _ = ContentType.objects.get_or_create(app_label='datasets', model='dataset')
        if layer_ctype.exists():
            perms = Permission.objects.filter(content_type=layer_ctype.first())
            for perm in perms:
                perm.codename = perm.codename.replace('layer', 'dataset')
                perm.content_type=dataset_ctype
                perm.save()
        with connection.schema_editor() as schema_editor:
            schema_editor.alter_db_table('Dataset', 'layers_layer', 'datasets_dataset')
            schema_editor.alter_db_table('Dataset', 'layers_attribute', 'datasets_attribute')
            schema_editor.alter_db_table('Dataset', 'layers_layer_styles', 'datasets_layer_styles')
            schema_editor.alter_db_table('Dataset', 'layers_style', 'datasets_style')
    except Exception as e:
        raise e

class Migration(migrations.Migration):
    atomic= True
    dependencies = [
        ('harvesting', '0026_harvestableresource_last_harvesting_succeeded'),
        ('upload', '0033_auto_20210531_1252'),
        ('base', '0068_rename_storetype_resourcebase_subtype'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('services', '0045_auto_20210629_1355'),
        ('datasets', '0036_remove_layer_storetype'),
    ]

    operations = [
        FixUpMigrationState('datasets', "dataset"),
        migrations.AlterModelOptions(
            name='dataset',
            options={'permissions': (('change_dataset_data', 'Can edit layer data'), ('change_dataset_style', 'Can change layer style'))},
        ),
        migrations.RunPython(alter_permissions)
    ]
