name: GeoNode Test Suites

on: [push, workflow_dispatch]

jobs:
  # -------------------------------------------------
  # BUILD DOCKER IMAGES AND SHARE AS ARTIFACTS
  # -------------------------------------------------
  build_images:
    name: Build and export Docker images
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build all services (Docker Compose v2)
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml build --progress plain

      - name: Save built Docker images
        run: |
          mkdir -p docker_images
          docker save -o docker_images/django.tar geonode/geonode:latest-ubuntu-24.04

      - name: Upload Docker images as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-images
          path: docker_images
          retention-days: 1  # automatically expires after 1 day

  # -------------------------------------------------
  # SMOKE TESTS (BLOCKING)
  # -------------------------------------------------
  geonode_test_suite_smoke:
    name: Smoke Tests
    needs: build_images
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker_images

      - name: Load Docker images
        run: |
          docker load -i docker_images/django.tar

      - name: Start the stack
        run: docker compose --env-file .env_test -f docker-compose-test.yml up -d
        working-directory: ${{ github.workspace }}

      - name: Setup test databases
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_postgres
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode_data
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode_data -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -c "${{ inputs.test_suite }}"

      - name: Run smoke tests
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -lc '
            ./tests/test.sh geonode.tests.smoke geonode.tests.test_rest_api geonode.tests.test_search geonode.tests.test_utils geonode.tests.test_headers --duration=30 --failfast
          '
        working-directory: ${{ github.workspace }}

      - name: Upload coverage data artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-geonode_test_suite_smoke
          path: .coverage

      - name: Stop stack (always)
        if: always()
        run: docker compose --env-file .env_test -f docker-compose-test.yml down -v
        working-directory: ${{ github.workspace }}

  # -------------------------------------------------
  # OTHER TEST SUITES (DEPEND ON SMOKE)
  # -------------------------------------------------
  geonode_test_suite:
    name: Main Tests
    needs: [build_images, geonode_test_suite_smoke]
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker_images

      - name: Load Docker images
        run: |
          docker load -i docker_images/django.tar

      - name: Start the stack
        run: docker compose --env-file .env_test -f docker-compose-test.yml up -d
        working-directory: ${{ github.workspace }}

      - name: Setup test databases
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_postgres
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode_data
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode_data -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -c "${{ inputs.test_suite }}"
      
      - name: Run tests
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -lc '
            TESTS=$(python -c "import sys; from geonode import settings; print(\" \".join([a + \".tests\" for a in settings.GEONODE_APPS if \"security\" not in a and \"geoserver\" not in a and \"upload\" not in a]))") &&
            ./tests/test.sh $TESTS --duration=30 --failfast
          '
      - name: Upload coverage data artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-geonode_test_suite
          path: .coverage

      - name: Stop containers
        run: docker compose --env-file .env_test -f docker-compose-test.yml down -v


  geonode_test_security:
    name: Security Tests
    needs: [build_images, geonode_test_suite_smoke]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker_images

      - name: Load Docker images
        run: |
          docker load -i docker_images/django.tar

      - name: Start the stack
        run: docker compose --env-file .env_test -f docker-compose-test.yml up -d
        working-directory: ${{ github.workspace }}

      - name: Setup test databases
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_postgres
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode_data
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode_data -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -c "${{ inputs.test_suite }}"
      
      - name: Run tests
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -lc '
            TESTS=$(python -c "import sys; from geonode import settings; print(\" \".join([a + \".tests\" for a in settings.GEONODE_APPS  if \"security\" in a]))") &&
            ./tests/test.sh $TESTS --duration=30 --failfast
          '
      - name: Upload coverage data artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-geonode_test_security
          path: .coverage

      - name: Stop containers
        run: docker compose --env-file .env_test -f docker-compose-test.yml down -v


  geonode_test_gis_backend:
    name: GIS Backend Tests
    needs: [build_images, geonode_test_suite_smoke]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker_images

      - name: Load Docker images
        run: |
          docker load -i docker_images/django.tar

      - name: Start the stack
        run: docker compose --env-file .env_test -f docker-compose-test.yml up -d
        working-directory: ${{ github.workspace }}

      - name: Setup test databases
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_postgres
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode_data
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode_data -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -c "${{ inputs.test_suite }}"

      - name: Run tests
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -lc '
            TESTS=$(python -c "import sys; from geonode import settings; print(\" \".join([a + \".tests\" for a in settings.GEONODE_APPS  if \"geoserver\" in a]))") &&
            ./tests/test.sh $TESTS --duration=30 --failfast
          '
      - name: Upload coverage data artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-geonode_test_gis_backend
          path: .coverage

      - name: Stop containers
        run: docker compose --env-file .env_test -f docker-compose-test.yml down -v


  geonode_test_rest_apis:
    name: REST API Tests
    needs: [build_images, geonode_test_suite_smoke]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker_images

      - name: Load Docker images
        run: |
          docker load -i docker_images/django.tar

      - name: Start the stack
        run: docker compose --env-file .env_test -f docker-compose-test.yml up -d
        working-directory: ${{ github.workspace }}

      - name: Setup test databases
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_postgres
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode_data
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode_data -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -c "${{ inputs.test_suite }}"
      
      - name: Run tests
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -lc '
            ./tests/test.sh geonode.api.tests geonode.base.api.tests geonode.layers.api.tests geonode.maps.api.tests geonode.documents.api.tests geonode.geoapps.api.tests --duration=30 --failfast
          '
      - name: Upload coverage data artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-geonode_test_rest_apis
          path: .coverage

      - name: Stop containers
        run: docker compose --env-file .env_test -f docker-compose-test.yml down -v


  geonode_test_csw:
    name: CSW Tests
    needs: [build_images, geonode_test_suite_smoke]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker_images

      - name: Load Docker images
        run: |
          docker load -i docker_images/django.tar

      - name: Start the stack
        run: docker compose --env-file .env_test -f docker-compose-test.yml up -d
        working-directory: ${{ github.workspace }}

      - name: Setup test databases
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_postgres
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode_data
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode_data -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -c "${{ inputs.test_suite }}"
      
      - name: Run tests
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -lc '
            ./tests/test.sh geonode.tests.csw geonode.catalogue.backends.tests --duration=30 --failfast
          '
      - name: Upload coverage data artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-geonode_test_csw
          path: .coverage

      - name: Stop containers
        run: docker compose --env-file .env_test -f docker-compose-test.yml down -v


  geonode_upload:
    name: Upload Tests
    needs: [build_images, geonode_test_suite_smoke]
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download built Docker images
        uses: actions/download-artifact@v4
        with:
          name: docker-images
          path: docker_images

      - name: Load Docker images
        run: |
          docker load -i docker_images/django.tar

      - name: Start the stack
        run: docker compose --env-file .env_test -f docker-compose-test.yml up -d
        working-directory: ${{ github.workspace }}

      - name: Setup test databases
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_postgres
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode
          docker compose --env-file .env_test -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode_data
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec db psql -U postgres -d test_geonode_data -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -c "${{ inputs.test_suite }}"
      
      - name: Run tests
        run: |
          docker compose --env-file .env_test -f docker-compose-test.yml exec django bash -lc '
            ./tests/test.sh geonode.upload --duration=30 --failfast
          '# UPLOAD THE COVERAGE FILE AS AN ARTIFACT

      - name: Upload coverage data artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-geonode_upload
          path: .coverage

      - name: Stop containers
        run: docker compose --env-file .env_test -f docker-compose-test.yml down -v

  # ----------------
  # COVERAGE COMMENT
  # ----------------
  coverage:
    name: Coverage
    needs:
      - geonode_test_suite_smoke
      - geonode_test_suite
      - geonode_test_security
      - geonode_test_gis_backend
      - geonode_test_rest_apis
      - geonode_test_csw
      - geonode_upload
    runs-on: ubuntu-24.04
    steps:
      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}
      - name: Delete all uploaded artifacts
        uses: actions/upload-artifact@v4
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt

  # -------------------------------------------------
  # CLEANUP JOB: REMOVE ALL ARTIFACTS AT THE END
  # -------------------------------------------------
  cleanup_artifacts:
    name: Cleanup Artifacts
    needs:
      - coverage
    runs-on: ubuntu-24.04
    if: always()
    steps:
      - name: Delete all uploaded artifacts
        uses: geekyeggo/delete-artifact@v5
        with:
          failOnError: false
