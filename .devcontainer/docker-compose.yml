version: '3.4'
services:
  # Update this to the name of the service you want to work with in your docker-compose.yml file
  django:
    # If you want add a non-root user to your Dockerfile, you can use the "remoteUser"
    # property in devcontainer.json to cause VS Code its sub-processes (terminals, tasks, 
    # debugging) to execute as the user. Uncomment the next line if you want the entire 
    # container to run as this user instead. Note that, on Linux, you may need to 
    # ensure the UID and GID of the container user you create matches your local user. 
    # See https://aka.ms/vscode-remote/containers/non-root for details.
    #
    # user: vscode

    # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer 
    # folder. Note that the path of the Dockerfile and context is relative to the *primary* 
    # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
    # array). The sample below assumes your primary file is in the root of your project.
    
    # build:
    #   context: .
    #   dockerfile: .devcontainer/Dockerfile

    restart: "no"

    healthcheck:
      test: "echo \"I'm alive.\""

    env_file:
      - .devcontainer/.env

    volumes:
      # Update this to wherever you want VS Code to mount the folder of your project
      - '.:/usr/src/geonode'
      # Uncomment the next line to use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      # - /var/run/docker.sock:/var/run/docker.sock 

    ports:
      - "8000:8000"
      - "5678:5678"

    entrypoint: ["/usr/src/geonode/entrypoint.sh"]

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    # Overrides default command so things don't shut down after the process ends.
    command: sleep infinity

  celery:
    restart: "no"
    env_file:
      - .devcontainer/.env

    volumes:
      - '.:/usr/src/geonode'

  geonode:
    restart: "no"

  # Removes letsencrypt when developing
  letsencrypt:
    deploy:
      replicas: 0

  geoserver:
    restart: "no"
    ports:
      - "8080:8080"

  data-dir-conf:
    restart: "no"

  db:
    restart: "no"
    ports:
     - "5432:5432"

  rabbitmq:
    restart: "no"
