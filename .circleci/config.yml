version: 2.1

jobs:
  build:

    docker:
      - image: circleci/buildpack-deps:focal

    parameters:
      load_docker_cache:
        type: boolean
      save_docker_cache:
        type: boolean
      test_suite:
        type: string
        default: ""

    steps:

      - checkout

      - setup_remote_docker

      - when:
          condition: <<parameters.load_docker_cache>>
          steps:
            - restore_cache:
                keys:
                  - v2-docker-images-{{ .Branch }}
            - run:
                name: Load Docker layers cache
                command: |
                  docker load -i ~/docker-layers-cache.tar || true

      - run:
          name: Build the stack
          command: docker-compose -f docker-compose-test.yml build
          working_directory: ./

      - when:
          condition: <<parameters.save_docker_cache>>
          steps:
            - run:
                name: Save Docker layers cache
                command: |
                  rm -f ~/docker-layers-cache.tar
                  docker save -o ~/docker-layers-cache.tar $(docker images -a --format "{{.ID}}")
                when: always
            - save_cache:
                key: v2-docker-images-{{ .Branch }}-{{ epoch }}
                paths:
                  - ~/docker-layers-cache.tar
                when: always

      - run:
          name: Start the stack
          command: docker-compose -f docker-compose-test.yml up -d
          working_directory: ./

      - run:
          name: Wait for everything to start...
          command: |
            n=1
            m=10
            until [ $n -gt $m ]
            do
              sleep 60
              DJANGO_STATUS=$(docker inspect --format="{{json .State.Health.Status}}" django4geonode)
              GEOSERVER_STATUS=$(docker inspect --format="{{json .State.Health.Status}}" geoserver4geonode)
              echo ""
              echo "Waited $n min (out of $m min)"
              if [[ $DJANGO_STATUS == '"healthy"' ]] && [[ $GEOSERVER_STATUS == '"healthy"' ]]; then
                break
              fi
              echo "Not healthy yet..."
              docker ps
              n=$[$n+1]
            done
            [[ $DJANGO_STATUS == '"healthy"' ]] && [[ $GEOSERVER_STATUS == '"healthy"' ]];

      - run:
          name: Show state (debug)
          command: docker ps
          when: on_fail

      - run:
          name: Geoserver logs (debug)
          command: docker logs geoserver4geonode --tail 500
          when: on_fail

      - run:
          name: Django logs (debug)
          command: docker logs django4geonode --tail 500
          when: on_fail

      - when:
          condition: <<parameters.test_suite>>
          steps:
            - run:
                name: Run test suite
                command: |
                  docker-compose -f docker-compose-test.yml exec db psql -U postgres -c 'SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid();'
                  docker-compose -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_postgres
                  docker-compose -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode
                  docker-compose -f docker-compose-test.yml exec db createdb -U postgres -T postgres test_geonode_data
                  docker-compose -f docker-compose-test.yml exec db psql -U postgres -d test_geonode -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
                  docker-compose -f docker-compose-test.yml exec db psql -U postgres -d test_geonode_data -c 'CREATE EXTENSION IF NOT EXISTS postgis;'
                  docker-compose -f docker-compose-test.yml exec django bash -c '<<parameters.test_suite>>'
                working_directory: ./
                no_output_timeout: 10m
            - run:
                name: Run pep8 checks
                command: |
                  docker-compose -f docker-compose-test.yml exec django bash -c 'flake8 geonode'
                  docker-compose -f docker-compose-test.yml exec django bash -c 'codecov; bash <(curl -s https://codecov.io/bash) -t 2c0e7780-1640-45f0-93a3-e103b057d8c8'
                working_directory: ./

workflows:

  commit:
    jobs:
      - build:
          name: geonode_test_suite_smoke
          load_docker_cache: true
          save_docker_cache: true
          test_suite: coverage run --branch --source=geonode manage.py test -v 3 --keepdb geonode.tests.smoke geonode.tests.test_message_notifications geonode.tests.test_rest_api geonode.tests.test_search geonode.tests.test_utils
      - build:
          name: geonode_test_suite
          load_docker_cache: true
          save_docker_cache: false
          test_suite: coverage run --branch --source=geonode manage.py test -v 3 --keepdb $(python -c "import sys;from geonode import settings;sys.stdout.write('\'' '\''.join([a+'\''.tests'\'' for a in settings.GEONODE_APPS]))")
          requires:
            - geonode_test_suite_smoke
      - build:
          name: geonode_test_rest_apis
          load_docker_cache: true
          save_docker_cache: false
          test_suite: coverage run --branch --source=geonode manage.py test -v 3 --keepdb geonode.base.api.tests geonode.layers.api.tests geonode.maps.api.tests geonode.documents.api.tests geonode.geoapps.api.tests
          requires:
            - geonode_test_suite_smoke
      - build:
          name: geonode_test_integration_csw
          load_docker_cache: true
          save_docker_cache: false
          test_suite: ./test_csw.sh
          requires:
            - geonode_test_suite_smoke
      - build:
          name: geonode_test_integration_upload
          load_docker_cache: true
          save_docker_cache: false
          test_suite: ./test_upload.sh
          requires:
            - geonode_test_suite_smoke
      - build:
          name: geonode_test_integration_monitoring
          load_docker_cache: true
          save_docker_cache: false
          test_suite: coverage run --branch --source=geonode manage.py test -v 3 --keepdb geonode.tests.smoke geonode.monitoring.tests.integration
          requires:
            - geonode_test_suite_smoke

      # TODO
      # - build:
      #     name: tests_integration
      #     load_docker_cache: true
      #     save_docker_cache: false
      #     test_suite: 'geonode.tests.integration'
      #     requires:
      #       - geonode_test_suite_smoke
      # - build:
      #     name: tests_geoserver_integration
      #     load_docker_cache: true
      #     save_docker_cache: false
      #     test_suite: 'geonode.geoserver.tests.integration'
      #     requires:
      #       - geonode_test_suite_smoke
      # - build:
      #     name: tests_upload_integration
      #     load_docker_cache: true
      #     save_docker_cache: false
      #     test_suite: 'geonode.upload.tests.integration'
      #     requires:
      #       - geonode_test_suite_smoke

  # nightly:
  #   triggers:
  #     - schedule:
  #         cron: "0 0 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - master
  #               - 3.x
  #   jobs:
  #     - build:
  #         load_docker_cache: false
  #         save_docker_cache: true
  #         test_suite: geonode.tests.smoke geonode.tests.integration $(python -c "import sys;from geonode import settings;sys.stdout.write('\'' '\''.join([a+'\''.tests'\'' for a in settings.GEONODE_APPS]))")
