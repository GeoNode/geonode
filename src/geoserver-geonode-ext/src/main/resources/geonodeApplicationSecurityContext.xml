<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

  <!-- ========================================================================================= -->
  <!-- The following is the Acegi configuration for form based authentication, with login/logout -->
  <!-- handling, as well as remember-me cookie handling, and session integration so that user    -->
  <!-- does not have to login for each page.                                                     -->
  <!-- This also makes sure that when you request a secured resource you go first to the         -->
  <!-- login page, but get redirected to the origally requested page once login is succefull     -->
  <!-- ========================================================================================= -->

  <!-- 
    This filter delegates a different chain of sub-filters for administration
    console pages and OWS services. Basically, we set up a chain involving basic/anonymous
    authentication for OWS services, and a form based authentication for  the web console, 
    so that accessing the console by means of simple calls is still easy.
    
    An attempt at form+basic has been done, that would have eased writing code accessing
    directly the console, but it does not play well with logout: once the browser learns
    about basic auth credentials it'll keep on using them, the only way to make it stop
    is to declare a different user in the location bar, such as in: http://user@host:port/...
    
    For filters introduction, their meanining, the
    different setup between form and basic authentication accesses,
    and importance of the order please see the Acegi reference guide, chapter 3.2,
    (page 17 of the PDF version)
  -->
  <bean id="geonodeFilterChainProxy"
    class="org.springframework.security.util.FilterChainProxy">
    <property name="filterInvocationDefinitionSource">
      <!-- 
      	GEONODE OLD:
        /wfs/**= httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        /ows/**= httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        /wfsv/**=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        /wms/**= httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        /wcs/**= httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        
        /rest/**=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,gnRestFilterInvocationInterceptor
        #/rest/**=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter
        /rest/process/batchdownload=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter
        
        /gwc/rest/web/**=gnAnonymousProcessingFilter,filterInvocationInterceptor
        
        /gwc/rest/**=httpSessionContextIntegrationFilterWithASCFalse,gnBasicProcessingFilter,gnRestFilterInvocationInterceptor
        /**=httpSessionContextIntegrationFilterWithASCTrue,logoutFilter,genodeCookieFilter,gnBasicProcessingFilter,gnAuthenticationProcessingFilter,gnAnonymousProcessingFilter,filterInvocationInterceptor
        
        LEGACY NEW:
        CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        PATTERN_TYPE_APACHE_ANT
        /web/**=httpSessionContextIntegrationFilterWithASCTrue,logoutFilter,authenticationProcessingFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,consoleExceptionTranslationFilter,filterInvocationInterceptor
        /j_spring_security_check/**=httpSessionContextIntegrationFilterWithASCTrue,logoutFilter,authenticationProcessingFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,consoleExceptionTranslationFilter,filterInvocationInterceptor
        /j_spring_security_logout/**=httpSessionContextIntegrationFilterWithASCTrue,logoutFilter,authenticationProcessingFilter,securityContextHolderAwareRequestFilter,rememberMeProcessingFilter,anonymousProcessingFilter,consoleExceptionTranslationFilter,filterInvocationInterceptor
        /rest/**=httpSessionContextIntegrationFilterWithASCFalse,basicProcessingFilter,anonymousProcessingFilter,owsExceptionTranslationFilter,restFilterInvocationInterceptor
        /gwc/rest/web/**=anonymousProcessingFilter,consoleExceptionTranslationFilter,filterInvocationInterceptor
        /gwc/rest/**=httpSessionContextIntegrationFilterWithASCFalse,basicProcessingFilter,anonymousProcessingFilter,owsExceptionTranslationFilter,restFilterInvocationInterceptor
        /**=httpSessionContextIntegrationFilterWithASCFalse,basicProcessingFilter,anonymousProcessingFilter,owsExceptionTranslationFilter,filterInvocationInterceptor
       -->
      <value>
        CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        PATTERN_TYPE_APACHE_ANT
        /web/**=httpSessionContextIntegrationFilterWithASCTrue,logoutFilter,genodeCookieFilter,gnBasicProcessingFilter,gnAuthenticationProcessingFilter,securityContextHolderAwareRequestFilter,gnAnonymousProcessingFilter,consoleExceptionTranslationFilter,filterInvocationInterceptor
        /j_spring_security_check/**=httpSessionContextIntegrationFilterWithASCTrue,logoutFilter,gnAuthenticationProcessingFilter,securityContextHolderAwareRequestFilter,gnAnonymousProcessingFilter,consoleExceptionTranslationFilter,filterInvocationInterceptor
        /j_spring_security_logout/**=httpSessionContextIntegrationFilterWithASCTrue,logoutFilter,gnAuthenticationProcessingFilter,securityContextHolderAwareRequestFilter,gnAnonymousProcessingFilter,consoleExceptionTranslationFilter,filterInvocationInterceptor
        /rest/**=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,gnRestFilterInvocationInterceptor
        /gwc/rest/web/**=gnAnonymousProcessingFilter,consoleExceptionTranslationFilter,filterInvocationInterceptor
        /gwc/rest/**=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,gnRestFilterInvocationInterceptor
        /**=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,securityContextHolderAwareRequestFilter,filterInvocationInterceptor
      </value>
    </property>
  </bean>

  <!-- 
    Puts default authentication informations in the security context, making sure
    we always get an anonymous user and anonymous role if all other authentication
    attempts failed
  -->
  <bean id="gnAnonymousProcessingFilter" class="org.geonode.security.GeoNodeAnonymousProcessingFilter">
    <constructor-arg index="0" ref="geonodeSecurityClient"/>
  </bean>
  
  <bean id="gnRestFilterInvocationInterceptor" class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
    <property name="authenticationManager" ref="gnAuthenticationManager" />
    <property name="accessDecisionManager">
      <bean class="org.springframework.security.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="false" />
        <property name="decisionVoters">
          <list>
            <bean class="org.springframework.security.vote.RoleVoter" />
            <bean class="org.springframework.security.vote.AuthenticatedVoter" />
          </list>
        </property>
      </bean>
    </property>
    <property name="objectDefinitionSource" ref="restFilterDefinitionMap" />
  </bean>

  <!-- 
    This filter does the actual main authentication workflow and handles form based authentication too.
    It asks the authentication manager whether access is granted to the resource the user is trying to access,
    redirects to a failure page if it fails, and to another filter if the authentication informations are 
    just being provided. This is useful only for form based authentication, the OWS services do use another
    authentication processing filter.
  -->
  <bean id="gnAuthenticationProcessingFilter"
    class="org.geoserver.security.GeoserverAuthenticationProcessingFilter">
    <property name="authenticationManager" ref="gnAuthenticationManager" />
    <property name="authenticationFailureUrl"
      value="/web/?wicket:bookmarkablePage=:org.geoserver.web.GeoServerLoginPage&amp;error=true" />
    <property name="defaultTargetUrl" value="/" />
    <property name="filterProcessesUrl" value="/j_spring_security_check" />
  </bean>

  <!-- 
      During the request execution security exceptions may be thrown, either during the
    authentication or authorization phase. This filter redirects authentication failures
    to the login form, whilst returns the user to an access denied page if the authorization
    levels are not enough
  -->
  <bean id="geonodeOwsExceptionTranslationFilter"
    class="org.springframework.security.ui.ExceptionTranslationFilter">
    <property name="authenticationEntryPoint">
      <ref bean="basicProcessingFilterEntryPoint" />
    </property>
    <property name="accessDeniedHandler">
      <bean class="org.springframework.security.ui.AccessDeniedHandlerImpl">
        <property name="errorPage" value="/accessDenied.jsp" />
      </bean>
    </property>
  </bean>

  <!-- 
    Handles the basic authentication headers.
  -->
  <bean id="gnBasicProcessingFilter"
    class="org.springframework.security.ui.basicauth.BasicProcessingFilter">
    <property name="authenticationManager">
      <ref local="gnAuthenticationManager" />
    </property>
    <property name="authenticationEntryPoint">
      <ref bean="basicProcessingFilterEntryPoint" />
    </property>
  </bean>

  <!-- 
    The bean managing authentication, basically forwards authentication requests against
    a number of child providers
  -->
  <bean id="gnAuthenticationManager"
    class="org.springframework.security.providers.ProviderManager">
    <property name="providers">
      <list>
        <ref local="geonodeAuthenticationProvider" />
        <bean
          class="org.springframework.security.providers.anonymous.AnonymousAuthenticationProvider">
          <property name="key" value="geoserver" />
        </bean>
      </list>
    </property>
  </bean>
 
  <bean id="geonodeHttpClient" class="org.geonode.security.HTTPClient">
    <description>httpclient used by geonodeSecurityClient to request authentication to GeoNode</description>
    <constructor-arg index="0">
      <description>Max connections per host</description>
      <value>10</value>
    </constructor-arg>
    <constructor-arg index="1">
      <description>Connection time out in milliseconds</description>
      <value>1000</value>
    </constructor-arg>
    <constructor-arg index="2">
      <description>Read time out in milliseconds</description>
      <value>1000</value>
    </constructor-arg>
  </bean>
  
  <!-- The client talking to GeoNode to get authentications from cookies and username/password -->
  <bean id="geonodeSecurityClient" class="org.geonode.security.DefaultSecurityClient">
    <!-- We probably need to add a reference to the data directory here -->
    <constructor-arg ref="geonodeHttpClient"/>
  </bean>
  
  <!-- The GeoNode username/password manager -->
  <bean id="geonodeAuthenticationProvider" class="org.geonode.security.GeoNodeAuthenticationProvider">
    <constructor-arg index="0" ref="geonodeSecurityClient"/>
  </bean>

  <!-- The GeoNode cookie processing filter -->
  <bean id="genodeCookieFilter" class="org.geonode.security.GeoNodeCookieProcessingFilter">
    <constructor-arg index="0" ref="geonodeSecurityClient"/>
  </bean>
  
  <!-- The custom data access manager using the GeoNode granted authorities -->
  <bean id="geonodeAccessManager" class="org.geonode.security.GeoNodeDataAccessManager"/>
  
  
  
  
  
  
  
    <!-- The dao used to deal with layer level security -->
  <bean id="accessRulesDao" class="org.geoserver.security.impl.DataAccessRuleDAO">
  	<constructor-arg ref="dataDirectory"/>
  	<constructor-arg ref="rawCatalog"/>
  </bean>
  
  <!-- The dao used to deal with service level security -->
  <bean id="serviceRulesDao" class="org.geoserver.security.impl.ServiceAccessRuleDAO">
    <constructor-arg ref="dataDirectory"/>
  	<constructor-arg ref="rawCatalog"/>
  </bean>

  <!-- The dao used to deal with rest security -->
  <bean id="restRulesDao" class="org.geoserver.security.impl.RESTAccessRuleDAO">
    <constructor-arg ref="dataDirectory"/>
  </bean>
  
  <!-- 
    This callback will be used before calling operations on OWS stuff, and making it secure
   -->
  <bean id="operationCallback"
    class="org.geoserver.security.OperationSecurityCallback">
    <constructor-arg ref="serviceRulesDao"/>
  </bean>
  
  <!--   
    This filter integrates the authentication information in the http sessions, so it's
    meant to be used only for the administration console, but not for the services.
    Gathers authentication infos from the session, so that you don't have to re-authenticate
    at each request, and adds it to the session after authentication.
    This specific instance is configured with remember-me functionality, so that authentication
    information can be gathered from a cookie set on the browser, too.
    This version will create the user session if missing, it's meant for web console operation.
  -->
  <bean id="httpSessionContextIntegrationFilterWithASCTrue"
    class="org.springframework.security.context.HttpSessionContextIntegrationFilter">
    <property name="allowSessionCreation" value="true" />
  </bean>

  <!-- 
    Same as the one above, but this one uses a session if it's already there, otherwise
    it won't create it. This is meant to keep the overhead on service call low, but allow
    users that have already authenticated using a form based access to keep using that
    authentication when accessing services.
  -->
  <bean id="httpSessionContextIntegrationFilterWithASCFalse"
    class="org.springframework.security.context.HttpSessionContextIntegrationFilter">
    <property name="allowSessionCreation" value="false" />
  </bean>

  <!--
    This filters processes logouts, removing both session informations, and the remember-me
    cookie from the browser
  -->
  <bean id="logoutFilter"
    class="org.springframework.security.ui.logout.LogoutFilter">
    <constructor-arg value="/web/" />
    <!-- URL redirected to after logout -->
    <constructor-arg>
      <list>
        <!-- ref bean="rememberMeServices" /-->
        <bean
          class="org.springframework.security.ui.logout.SecurityContextLogoutHandler" />
      </list>
    </constructor-arg>
  </bean>
  
  <!-- 
    This entry point gets called when basic authentication is needed 
    (or a previous attempt fail) to commence authentication 
    with the basic processing filter 
  -->
  <bean id="basicProcessingFilterEntryPoint"
    class="org.springframework.security.ui.basicauth.BasicProcessingFilterEntryPoint">
    <property name="realmName">
      <value>GeoServer Realm</value>
    </property>
  </bean>

  <!-- 
    The actual authorization checks at the filter level. 
    The voters make sure the user is both authenticated (the 
    anonymous filter ensures there is at least an anonymous one)
    and have the roles required.
    The objectDefinitionSource provides a set of path along with the
    roles that the user must have in order to access the secured resource
  -->
  <bean id="filterInvocationInterceptor"
    class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
    <property name="authenticationManager" ref="gnAuthenticationManager" />
    <property name="accessDecisionManager">
      <bean class="org.springframework.security.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="false" />
        <property name="decisionVoters">
          <list>
            <bean class="org.springframework.security.vote.RoleVoter" />
            <bean class="org.springframework.security.vote.AuthenticatedVoter" />
          </list>
        </property>
      </bean>
    </property>
    <property name="objectDefinitionSource">
      <value>
        CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        PATTERN_TYPE_APACHE_ANT 
        /config/**=ROLE_ADMINISTRATOR
        /**=IS_AUTHENTICATED_ANONYMOUSLY
      </value>
    </property>
  </bean>

  <!--
      HTTP Method security rules.  This follows the same format as the normal DefinitionSource, but allows methods to be specified as well.
      Remember that rules are matched in order, so please put the most specific rules at the beginning of the list.
      In order to have these applied, add restFilterDefintionMap to the end of the filter list in the filterChainProxy above
  -->
  <bean id="restFilterDefinitionMap" class="org.geoserver.security.RESTfulDefinitionSource">
      <constructor-arg ref="restRulesDao"/>
  </bean>

  <!-- 
    During the request execution security exceptions may be thrown, either during the
    authentication or authorization phase. This filter redirects authentication failures
    to the login form, whilst returns the user to an access denied page if the authorization
    levels are not enough
  -->
  <bean id="consoleExceptionTranslationFilter"
    class="org.springframework.security.ui.ExceptionTranslationFilter">
    <property name="authenticationEntryPoint">
      <bean
        class="org.springframework.security.ui.webapp.AuthenticationProcessingFilterEntryPoint">
        <property name="loginFormUrl" value="/admin/login.do" />
        <property name="forceHttps" value="false" />
      </bean>
    </property>
    <property name="accessDeniedHandler">
      <bean class="org.springframework.security.ui.AccessDeniedHandlerImpl">
        <property name="errorPage" value="/accessDenied.jsp" />
      </bean>
    </property>
  </bean>

  <!--  
    Double check, this may not be necessary
  -->
  <bean id="securityContextHolderAwareRequestFilter"
    class="org.springframework.security.wrapper.SecurityContextHolderAwareRequestFilter" />

</beans>
