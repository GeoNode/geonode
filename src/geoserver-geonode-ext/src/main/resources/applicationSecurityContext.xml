<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

  <!-- ========================================================================================= -->
  <!-- The following is the Acegi configuration for form based authentication, with login/logout -->
  <!-- handling, as well as remember-me cookie handling, and session integration so that user    -->
  <!-- does not have to login for each page.                                                     -->
  <!-- This also makes sure that when you request a secured resource you go first to the         -->
  <!-- login page, but get redirected to the origally requested page once login is succefull     -->
  <!-- ========================================================================================= -->

  <!-- 
    This filter delegates a different chain of sub-filters for administration
    console pages and OWS services. Basically, we set up a chain involving basic/anonymous
    authentication for OWS services, and a form based authentication for  the web console, 
    so that accessing the console by means of simple calls is still easy.
    
    An attempt at form+basic has been done, that would have eased writing code accessing
    directly the console, but it does not play well with logout: once the browser learns
    about basic auth credentials it'll keep on using them, the only way to make it stop
    is to declare a different user in the location bar, such as in: http://user@host:port/...
    
    For filters introduction, their meanining, the
    different setup between form and basic authentication accesses,
    and importance of the order please see the Acegi reference guide, chapter 3.2,
    (page 17 of the PDF version)
  -->
  <bean id="geonodeFilterChainProxy"
    class="org.springframework.security.util.FilterChainProxy">
    <property name="filterInvocationDefinitionSource">
      <value>
        CONVERT_URL_TO_LOWERCASE_BEFORE_COMPARISON
        PATTERN_TYPE_APACHE_ANT
        /wfs/**= httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        /ows/**= httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        /wfsv/**=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        /wms/**= httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        /wcs/**= httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,filterInvocationInterceptor
        
        /rest/**=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter,gnRestFilterInvocationInterceptor
        #/rest/**=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter
        /rest/process/batchdownload=httpSessionContextIntegrationFilterWithASCFalse,genodeCookieFilter,gnBasicProcessingFilter,gnAnonymousProcessingFilter,geonodeOwsExceptionTranslationFilter
        
        /gwc/rest/web/**=gnAnonymousProcessingFilter,filterInvocationInterceptor
        
        /gwc/rest/**=httpSessionContextIntegrationFilterWithASCFalse,gnBasicProcessingFilter,gnAnonymousProcessingFilter,gnRestFilterInvocationInterceptor
        /**=httpSessionContextIntegrationFilterWithASCTrue,logoutFilter,genodeCookieFilter,gnBasicProcessingFilter,gnAuthenticationProcessingFilter,gnAnonymousProcessingFilter,filterInvocationInterceptor
      </value>
    </property>
  </bean>

  <!-- 
    Puts default authentication informations in the security context, making sure
    we always get an anonymous user and anonymous role if all other authentication
    attempts failed
  -->
  <bean id="gnAnonymousProcessingFilter" class="org.geonode.security.GeoNodeAnonymousProcessingFilter">
    <constructor-arg index="0" ref="geonodeSecurityClient"/>
  </bean>
  
  <bean id="gnRestFilterInvocationInterceptor" class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
    <property name="authenticationManager" ref="gnAuthenticationManager" />
    <property name="accessDecisionManager">
      <bean class="org.springframework.security.vote.AffirmativeBased">
        <property name="allowIfAllAbstainDecisions" value="false" />
        <property name="decisionVoters">
          <list>
            <bean class="org.springframework.security.vote.RoleVoter" />
            <bean class="org.springframework.security.vote.AuthenticatedVoter" />
          </list>
        </property>
      </bean>
    </property>
    <property name="objectDefinitionSource" ref="restFilterDefinitionMap" />
  </bean>

  <!-- 
    This filter does the actual main authentication workflow and handles form based authentication too.
    It asks the authentication manager whether access is granted to the resource the user is trying to access,
    redirects to a failure page if it fails, and to another filter if the authentication informations are 
    just being provided. This is useful only for form based authentication, the OWS services do use another
    authentication processing filter.
  -->
  <bean id="gnAuthenticationProcessingFilter"
    class="org.geoserver.security.GeoserverAuthenticationProcessingFilter">
    <property name="authenticationManager" ref="gnAuthenticationManager" />
    <property name="authenticationFailureUrl"
      value="/web/?wicket:bookmarkablePage=:org.geoserver.web.GeoServerLoginPage&amp;error=true" />
    <property name="defaultTargetUrl" value="/" />
    <property name="filterProcessesUrl" value="/j_acegi_security_check" />
  </bean>

  <!-- 
      During the request execution security exceptions may be thrown, either during the
    authentication or authorization phase. This filter redirects authentication failures
    to the login form, whilst returns the user to an access denied page if the authorization
    levels are not enough
  -->
  <bean id="geonodeOwsExceptionTranslationFilter"
    class="org.springframework.security.ui.ExceptionTranslationFilter">
    <property name="authenticationEntryPoint">
      <ref bean="basicProcessingFilterEntryPoint" />
    </property>
    <property name="accessDeniedHandler">
      <bean class="org.springframework.security.ui.AccessDeniedHandlerImpl">
        <property name="errorPage" value="/accessDenied.jsp" />
      </bean>
    </property>
  </bean>

  <!-- 
    Handles the basic authentication headers.
  -->
  <bean id="gnBasicProcessingFilter"
    class="org.springframework.security.ui.basicauth.BasicProcessingFilter">
    <property name="authenticationManager">
      <ref local="gnAuthenticationManager" />
    </property>
    <property name="authenticationEntryPoint">
      <ref bean="basicProcessingFilterEntryPoint" />
    </property>
  </bean>

  <!-- 
    The bean managing authentication, basically forwards authentication requests against
    a number of child providers
  -->
  <bean id="gnAuthenticationManager"
    class="org.springframework.security.providers.ProviderManager">
    <property name="providers">
      <list>
        <ref local="geonodeAuthenticationProvider" />
        <bean
          class="org.springframework.security.providers.anonymous.AnonymousAuthenticationProvider">
          <property name="key" value="geoserver" />
        </bean>
      </list>
    </property>
  </bean>
 
  <bean id="geonodeHttpClient" class="org.geonode.security.HTTPClient">
    <description>httpclient used by geonodeSecurityClient to request authentication to GeoNode</description>
    <constructor-arg index="0">
      <description>Max connections per host</description>
      <value>10</value>
    </constructor-arg>
    <constructor-arg index="1">
      <description>Connection time out in milliseconds</description>
      <value>1000</value>
    </constructor-arg>
    <constructor-arg index="2">
      <description>Read time out in milliseconds</description>
      <value>1000</value>
    </constructor-arg>
  </bean>
  
  <!-- The client talking to GeoNode to get authentications from cookies and username/password -->
  <bean id="geonodeSecurityClient" class="org.geonode.security.DefaultSecurityClient">
    <!-- We probably need to add a reference to the data directory here -->
    <constructor-arg ref="geonodeHttpClient"/>
  </bean>
  
  <!-- The GeoNode username/password manager -->
  <bean id="geonodeAuthenticationProvider" class="org.geonode.security.GeoNodeAuthenticationProvider">
    <constructor-arg index="0" ref="geonodeSecurityClient"/>
  </bean>

  <!-- The GeoNode cookie processing filter -->
  <bean id="genodeCookieFilter" class="org.geonode.security.GeoNodeCookieProcessingFilter">
    <constructor-arg index="0" ref="geonodeSecurityClient"/>
  </bean>
  
  <!-- The custom data access manager using the GeoNode granted authorities -->
  <bean id="geonodeAccessManager" class="org.geonode.security.GeoNodeDataAccessManager"/>
  
</beans>
