language: python
python:
  - 3.7

cache:
  pip: true
  directories:
    - $HOME/buildout-cache

before_cache:
  - rm -f $HOME/.cache/pip/log/debug.log

dist: xenial

services:
  - docker
  - postgresql

addons:
  hosts:
    - geonode
  postgresql: 9.6
  apt:
    packages:
      - python3-pip
      - postgresql-9.6-postgis-2.4
      - nginx
  firefox: "latest-esr"

branches:
  only:
    - master

jobs:
  include:
    - stage: unit-tests
      name: "GeoServer-backend Core Modules Smoke Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.geoserver'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is GeoServer server address
          - GEOSERVER_SERVER_URL: http://localhost:8080/geoserver/
          - GEOSERVER_SERVER_PORT: 8080
          - ON_TRAVIS: 'True'
          - TEST_RUN_CORE: 'True'
          - MONITORING_ENABLED: 'False'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'

    - stage: unit-tests
      name: "GeoServer-backend Contrib Apps Smoke Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.geoserver'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is GeoServer server address
          - GEOSERVER_SERVER_URL: http://localhost:8080/geoserver/
          - GEOSERVER_SERVER_PORT: 8080
          - ON_TRAVIS: 'True'
          - TEST_RUN_INTERNAL_APPS: 'True'
          - MONITORING_ENABLED: 'False'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'

    - stage: unit-tests
      name: "GeoServer-backend CSW-Catalogue Smoke Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.geoserver'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is GeoServer server address
          - GEOSERVER_SERVER_URL: http://localhost:8080/geoserver/
          - GEOSERVER_SERVER_PORT: 8080
          - ON_TRAVIS: 'True'
          - TEST_RUN_INTEGRATION_CSW: 'True'
          - MONITORING_ENABLED: 'False'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'
          - CELERY_ALWAYS_EAGER: 'True'

    - stage: unit-tests
      name: "QGis Server-backend Core Modules Smoke Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.qgis_server'
          - DJANGO_SETTINGS_MODULE: 'geonode.local_settings'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is qgis server address
          - QGIS_SERVER_URL: http://localhost:9000/
            # This is the location of docker network bridge
            # So QGIS server can access this address
          - SITEURL: http://localhost:8000/
          - QGIS_SERVER_PORT: 9000
          - ON_TRAVIS: 'True'
          - TEST_RUN_CORE: 'True'
          - MONITORING_ENABLED: 'False'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'
          - CELERY_ALWAYS_EAGER: 'True'

    - stage: unit-tests
      name: "QGis Server-backend Contrib Apps Smoke Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.qgis_server'
          - DJANGO_SETTINGS_MODULE: 'geonode.local_settings'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is qgis server address
          - QGIS_SERVER_URL: http://localhost:9000/
            # This is the location of docker network bridge
            # So QGIS server can access this address
          - SITEURL: http://localhost:8000/
          - QGIS_SERVER_PORT: 9000
          - ON_TRAVIS: 'True'
          - TEST_RUN_INTERNAL_APPS: 'True'
          - MONITORING_ENABLED: 'False'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'
          - CELERY_ALWAYS_EAGER: 'True'

    - stage: upload-tests
      name: "GeoServer-backend Upload Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.geoserver'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is GeoServer server address
          - GEOSERVER_SERVER_URL: http://localhost:8080/geoserver/
          - GEOSERVER_SERVER_PORT: 8080
          - ON_TRAVIS: 'True'
          - TEST_RUNNER_KEEPDB: 'True'
          - TEST_RUN_INTEGRATION: 'True'
          - TEST_RUN_INTEGRATION_SERVER: 'False'
          - TEST_RUN_INTEGRATION_UPLOAD: 'True'
          - TEST_RUN_INTEGRATION_MONITORING: 'False'
          - TEST_RUN_INTEGRATION_CSW: 'False'
          - TEST_RUN_INTEGRATION_BDD: 'False'
          - MONITORING_ENABLED: 'True'
          - USER_ANALYTICS_ENABLED: 'True'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'
          - CELERY_ALWAYS_EAGER: 'True'

    - stage: anlytics-tests
      name: "GeoServer-backend Monitoring Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.geoserver'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is GeoServer server address
          - GEOSERVER_SERVER_URL: http://localhost:8080/geoserver/
          - GEOSERVER_SERVER_PORT: 8080
          - ON_TRAVIS: 'True'
          - TEST_RUNNER_KEEPDB: 'True'
          - TEST_RUN_INTEGRATION: 'True'
          - TEST_RUN_INTEGRATION_SERVER: 'False'
          - TEST_RUN_INTEGRATION_UPLOAD: 'False'
          - TEST_RUN_INTEGRATION_MONITORING: 'True'
          - TEST_RUN_INTEGRATION_CSW: 'False'
          - TEST_RUN_INTEGRATION_BDD: 'False'
          - MONITORING_ENABLED: 'True'
          - USER_ANALYTICS_ENABLED: 'True'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'
          - CELERY_ALWAYS_EAGER: 'True'

    - stage: frontend-tests
      name: "BDD Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.geoserver'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is GeoServer server address
          - GEOSERVER_SERVER_URL: http://localhost:8080/geoserver/
          - GEOSERVER_SERVER_PORT: 8080
          - ON_TRAVIS: 'True'
          - TEST_RUN_INTEGRATION: 'False'
          - TEST_RUN_INTEGRATION_CSW: 'False'
          - TEST_RUN_INTEGRATION_BDD: 'True'
          - MONITORING_ENABLED: 'False'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'
          - CELERY_ALWAYS_EAGER: 'True'

    - stage: frontend-tests
      name: "Selenium Tests Core"
      env:
          - TEST_RUN_SELENIUM: 'True'

    - stage: frontend-tests
      name: "Selenium Tests SPCGeoNode"
      env:
          - TEST_RUN_SELENIUM: 'True'
          - SPCGEONODE: 'True'

    - stage: integration-tests
      name: "Backend Integration Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.geoserver'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is GeoServer server address
          - GEOSERVER_SERVER_URL: http://localhost:8080/geoserver/
          - GEOSERVER_SERVER_PORT: 8080
          - ON_TRAVIS: 'True'
          - TEST_RUNNER_KEEPDB: 'True'
          - TEST_RUN_INTEGRATION: 'True'
          - TEST_RUN_INTEGRATION_SERVER: 'False'
          - TEST_RUN_INTEGRATION_UPLOAD: 'False'
          - TEST_RUN_INTEGRATION_MONITORING: 'False'
          - TEST_RUN_INTEGRATION_CSW: 'False'
          - TEST_RUN_INTEGRATION_BDD: 'False'
          - MONITORING_ENABLED: 'True'
          - USER_ANALYTICS_ENABLED: 'True'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'
          - CELERY_ALWAYS_EAGER: 'True'

    - stage: integration-tests
      name: "GeoServer Integration Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.geoserver'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is GeoServer server address
          - GEOSERVER_SERVER_URL: http://localhost:8080/geoserver/
          - GEOSERVER_SERVER_PORT: 8080
          - ON_TRAVIS: 'True'
          - TEST_RUNNER_KEEPDB: 'True'
          - TEST_RUN_INTEGRATION: 'True'
          - TEST_RUN_INTEGRATION_SERVER: 'True'
          - TEST_RUN_INTEGRATION_UPLOAD: 'False'
          - TEST_RUN_INTEGRATION_MONITORING: 'False'
          - TEST_RUN_INTEGRATION_CSW: 'False'
          - TEST_RUN_INTEGRATION_BDD: 'False'
          - MONITORING_ENABLED: 'True'
          - USER_ANALYTICS_ENABLED: 'True'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'
          - CELERY_ALWAYS_EAGER: 'True'
          - DATABASE_URL: 'postgis://geonode:geonode@localhost:5432/upload_test'
          - GEODATABASE_URL: 'postgis://geonode:geonode@localhost:5432/upload_test'
          - DEFAULT_BACKEND_DATASTORE: 'datastore'

    - stage: integration-tests
      name: "QGis Server Integration Tests"
      virtualenv:
          system_site_packages: false
      env:
          - BACKEND: 'geonode.qgis_server'
          - DJANGO_SETTINGS_MODULE: 'geonode.local_settings'
          - DOCKER_COMPOSE_VERSION: 1.19.0
            # This is qgis server address
          - QGIS_SERVER_URL: http://localhost:9000/
            # This is the location of docker network bridge
            # So QGIS server can access this address
          - SITEURL: http://localhost:8000/
          - QGIS_SERVER_PORT: 9000
          - ON_TRAVIS: 'True'
          - TEST_RUNNER_KEEPDB: 'True'
          - TEST_RUN_INTEGRATION: 'True'
          - MONITORING_ENABLED: 'False'
          - SESSION_EXPIRED_CONTROL_ENABLED: 'True'
          - CELERY_ALWAYS_EAGER: 'True'
          - DATABASE_URL: 'postgresql://geonode:geonode@localhost:5432/upload_test'
          - GEONODE_CLIENT_LAYER_PREVIEW_LIBRARY: 'leaflet'

  fast_finish: true

  allow_failures:
    - name: "GeoServer-backend Upload Tests"

before_install:
  - if [ "$TEST_RUN_SELENIUM" = "True" ]; then
      git clone --depth 1 https://github.com/GeoNode/geonode-selenium.git;
      export GEONODE_REPOSITORY=$(pwd);
      GECKODRIVER_VERSION="v0.24.0";
    else
      sudo apt-get update
      sudo /etc/init.d/postgresql stop
      sudo /etc/init.d/postgresql start 9.6
      mkdir -p $HOME/buildout-cache/{eggs,downloads};
      scripts/misc/geoserver_server_setup.sh before_install;
      scripts/misc/qgis_server_setup.sh before_install;
      sudo apt-get autoremove sqlite3;
    fi
  - python --version;

install:
  - set -ex;
    if [ "$TEST_RUN_INTEGRATION_BDD" = "True" ]; then
      /usr/bin/Xvfb :99 -ac -screen 0 1024x768x8 & export DISPLAY=":99";
      GECKODRIVER_VERSION="v0.24.0";
      wget https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz -O geckodriver.tar.gz;
      mkdir bin;
      tar zxf geckodriver.tar.gz -C bin;
      export PATH=$PATH:$PWD/bin;
    fi
  - set -ex;
    if [ "$TEST_RUN_SELENIUM" = "True" ] && [ "$SPCGEONODE" == "True" ]; then
      :;
    elif [ "$TEST_RUN_SELENIUM" = "True" ]; then
      pip install -r geonode-selenium/requirements.txt --upgrade --no-cache;
      wget https://download.osgeo.org/geotiff/samples/spot/chicago/UTM2GTIF.TIF -P geonode-selenium/data;
      wget https://download.osgeo.org/geotiff/samples/made_up/ntf_nord.tif -P geonode-selenium/data;
      wget https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz -O geckodriver.tar.gz;
      mkdir bin;
      tar zxf geckodriver.tar.gz -C bin;
      export PATH=$PATH:$PWD/bin;
    else
      sudo apt-get -qq -y update;
      sudo apt-get install -y libgdal1i python3-gdal gdal-bin spatialite-bin;
      sudo apt-get install -y python3-virtualenv python3-pil python3-lxml python3-pyproj python3-shapely python3-httplib2 python3-httplib2 gettext;
      sudo apt-get install -y python3-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev libjpeg-dev libpq-dev libgdal-dev git default-jdk;
      sudo apt-add-repository -y ppa:jonathonf/backports;
      sudo apt-get -y update && sudo apt-get install -y sqlite3 spatialite-bin libsqlite3-mod-spatialite;
      sudo apt install -y openjdk-8-jre openjdk-8-jdk ant maven;
      sudo update-java-alternatives --set java-1.8.0-openjdk-amd64;
      export JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::");
      export PATH=$JAVA_HOME'bin/java':$PATH;
      pip install -r requirements.txt --upgrade --no-cache;
      pip install -e . --upgrade;
      pip install pygdal==`gdal-config --version`.*;
    fi;
    pip install codecov;

before_script:
  - set -ex;
    if [ "$TEST_RUN_SELENIUM" = "True" ]; then
      sudo service nginx stop;
    else
      echo "Initialize DB";
      psql -U postgres -c "create extension postgis";
      chmod +x scripts/misc/create_dbs_travis.sh;
      scripts/misc/create_dbs_travis.sh before_script;
      echo "For GeoServer Server Travis steps";
      scripts/misc/geoserver_server_setup.sh before_script;
      echo "For QGIS Server Travis steps";
      scripts/misc/qgis_server_setup.sh before_script;
      echo "Start NGINX server";
      sudo nginx -s stop;
      sudo nginx -c `pwd`/scripts/misc/nginx_integration.conf;
      echo "Setup GeoNode";
      paver setup;
    fi

script:
  - set -ex;
    if [ "$TEST_RUN_SELENIUM" = "True" ] && [ "$SPCGEONODE" = "True" ]; then
      geonode-selenium/test-docker.sh;
    elif [ "$TEST_RUN_SELENIUM" = "True" ]; then
      docker-compose -f docker-compose.yml -f docker-compose.override.localhost.yml up --build -d;
      URL="http://localhost";
      GEONODE_USER=admin GEONODE_PASS=admin GEONODE_URL="$URL" geonode-selenium/test-core.sh;
    else
      paver run_tests --coverage --local false;
    fi

after_script:
  - set -ex;
    if [ "$TEST_RUN_SELENIUM" = "True" ]; then
      true;
    else
      echo "For GeoServer Server Travis steps";
      scripts/misc/geoserver_server_setup.sh after_script;
      echo "For QGIS Server Travis steps";
      scripts/misc/qgis_server_setup.sh after_script;
      echo "Stop NGINX server";
      sudo nginx -c `pwd`/scripts/misc/nginx_integration.conf -s stop;
      echo "Cleanup";
      paver reset_hard;
    fi

after_success:
  - codecov
  - bash <(curl -s https://codecov.io/bash) -t 2c0e7780-1640-45f0-93a3-e103b057d8c8

notifications:
  email:
    - alessio.fabiani@gmail.com
