.. _osm2pgsql:

Loading OSM Data into GeoNode
=============================

In this section, we will walk through the steps necessary to load OSM data into your GeoNode project. As discussed in previous sections, your GeoNode already uses OSM tiles from MapQuest and the main OSM servers as some of the available base layers. This session is specifically about extracting actual data from OSM and converting it for use in your project and potentially for Geoprocessing tasks.

The first step in this process is to get the data from OSM. We will be using the OSM Overpass API since it lets us do more complex queries than the OSM API itself. You should refer to the OSM Overpass API documentation to learn about all of its features. It is an extremely powerful API that lets you extract data from OSM using a very sophisticated API.

- http://wiki.openstreetmap.org/wiki/Overpass_API
- http://wiki.openstreetmap.org/wiki/Overpass_API/Language_Guide

In this example, we will be extracting building footprint data around Port au Prince in Haiti. To do this we will use an interactive tool that makes it easy construct a Query against the Overpass API. Point your browser at http://overpass-turbo.eu/ and use the search tools to zoom into Port Au Prince and Cit√© Soleil specifically.

You will need to cut and paste the query specified below to get all of the appropriate data under the bounding box::

    <osm-script>
      <union into="_">
        <bbox-query {{bbox}}/>
        <recurse into="x" type="node-relation"/>
        <query type="way">
          <bbox-query {{bbox}}/>
          <has-kv k="building" v="yes"></has-kv>
        </query>
        <recurse into="x" type="way-node"/>
        <recurse type="way-relation"/>
      </union>
      <print mode="meta"/>
    </osm-script>

This should look like the following.

.. figure:: img/overpass_turbo.png

When you have the bounding box and query set correctly, click the "Export" button on the menu to bring up the export menu, and then click the API interpreter link to download the OSM data base on the query you have specified.

.. figure:: img/overpass_export.png

This will download a file named 'export.osm' on your file system. You will probably want to rename it something else more specific. You can do that by issuing the following command in the directory where it was downloaded::

    $ mv export.osm cite_soleil_buildings.osm

.. note:: You can also rename the file in your Operating Systems File management tool (Windows Explorer, Finder etc).

Exporting OSM data to shapefile using QGIS
------------------------------------------

Now that we have OSM data on our filesystem, we will need to convert it into a format suitable for uploading into your GeoNode. There are many ways to accomplish this, but for purposes of this example, we will use an OSM QGIS plugin that makes if fairly easy. Please consult the wiki page that explains how to install this plugin and make sure it is installed in your QGIS instance. Once its installed, you can use the Web Menu to load your file.

.. figure:: img/load_osm.png

This will bring up a dialog box that you can use to find and convert the OSM file we downloaded.

.. figure:: img/load_osm_dialog.png

When the process has completed,  you will see your layers in the Layer Tree in QGIS.

.. figure:: img/qgis_layers.png

Since we are only interested in the polygons, we can turn the other 2 layers off in the Layer Tree.

.. figure:: img/qgis_layer_off.png

The next step is to use QGIS to convert this layer into a Shapefile so we can upload it into GeoNode. To do this, select the layer in the Layer tree, right click and then select the Save As option.

.. figure:: img/qgis_save_as.png

This will bring up the Save Vector Layer as Dialog.

.. figure:: img/qgis_save_as_dialog.png

Specify where on disk you want your file saved, and hit Save then OK.

.. figure:: img/save_layer_path.png

You now have a shapefile of the data you extracted from OSM that you can use to load into GeoNode. Use the GeoNode Layer Upload form to load the Shapefile parts into your GeoNode, and optionally edit the metadata and then you can view your layer in the Layer Info page in your geonode.

.. figure:: img/buildings_layer_geonode.png

.. note:: You may want to switch to an imagery layer in order to more easily see the buildings on the OSM background.

Exporting OSM data to shapefile using GDAL
------------------------------------------

An alternative way to export the .osm file to a shapefile is to use `ogr2ogr <http://www.gdal.org/ogr2ogr.html>`_ combined with the `GDAL osm driver <http://www.gdal.org/drv_osm.html>`_, available from GDAL version 1.10.

As a first step, inspect how the GDAL OSM driver sees the .osm file using the ogrinfo command::

    $ ogrinfo cite_soleil_buildings.osm
    Had to open data source read-only.
    INFO: Open of `cite_soleil_buildings.osm'
          using driver `OSM' successful.
    1: points (Point)
    2: lines (Line String)
    3: multilinestrings (Multi Line String)
    4: multipolygons (Multi Polygon)
    5: other_relations (Geometry Collection)

ogrinfo has detected 5 different geometric layers inside the OSM data source. As we are just interested in the buildings, you will just export the multipolygons layer to a new shapefile using the GDAL ogr2ogr command utility::

    $ ogr2ogr cite_soleil_buildings cite_soleil_buildings.osm multipolygons

Now you can upload the shapefile to GeoNode using the GeoNode Upload form in the same manner as you did in the previous section.

Using GeoGig to load OSM Data into Manage OSM Data
--------------------------------------------------

Another alternative for working with OSM data in your GeoNode is to use `GeoGig <http://geogig.org/>`_. GeoGig is a tool that draws inspiration from Git but adapts its core concepts to handle distributed versioning of geospatial data. GeoGig allows you to load OpenStreetMap data into a repository on your server and either export that data into PostGIS for use in your GeoNode, or configure the GeoGig GeoServer extension and expose the repo directly from GeoServer. An article about this process can be found on the `Boundless Geo Blog <https://boundlessgeo.com/2014/03/geogit-and-openstreetmap-for-yolanda/>`_, and will be described below. Much of the impetus for GeoGig came from the ROGUE JCTD and the technology has been incorporated into `Boundless Exchange <https://boundlessgeo.com/boundless-exchange/>`_.

Much more information about how to perform the steps below can be found in the GeoGig documentation page on `Using GeoGig with OpenStreetMap data <http://geogig.org/docs/interaction/osm.html>`_. The instructions that follow are only a brief overview of the process.

Getting Started
+++++++++++++++

You will first need to install the GeoGig command line tools. These can be found on the projects `SourceForge page <https://sourceforge.net/projects/geogig/files/latest/download>`_. Follow the instructions contained in the installation file in order to install the CLI tools on your GeoNode server. Once you have the tools installed and added to your path, the *geogig* command should be available::

    $ geogig --version
             Project Version : 1.0-SNAPSHOT
                  Build Time : December 18, 2014 at 03:59:10 UTC
             Build User Name : Unknown
            Build User Email : Unknown
                  Git Branch : master
               Git Commit ID : a4a80a8dd853dfe497729b35399594947866e8ae
             Git Commit Time : December 18, 2014 at 03:44:24 UTC
      Git Commit Author Name : Gabriel Roldan
     Git Commit Author Email : gabriel.roldan@gmail.com
          Git Commit Message : Synchronize DefaultPlatform.getTempDir() to avoid false precondition check on concurrent access.

Once the GeoGig command is available, you will need to create an empty repository to hold your data. Change directories to a suitable location on your servers filesystem and issue the following command substituting *my_repo* for whatever name you choose::

    $ cd /somewhere/on/file/system
    $ mkdir my_repo
    $ geogig init
    Initialized empty Geogig repository in /somewhere/on/filesystem/my_repo/.geogig

Loading OSM Data into your Repository
+++++++++++++++++++++++++++++++++++++

Now that you have an empty repository to store our data, the next step is to load the current snapshot of OSM data into your repository using the *geogig osm download* command. At a minimum, you will want to use a bounding box filter to limit the downloaded data to the area of interest for your geonode installation. The example below is a bounding box that encompasses the country of Malawi. More information about the GeoGig OSM download command can be found in the `geogig docs <http://geogig.org/manpages/osmdownload.html>`_.::

    $ geogig osm download --bbox -17.129459 32.668991 -9.364680 35.920441 --saveto ./mw-osm-temp --keep-files

    Connecting to http://overpass-api.de/api/interpreter...

    Downloaded data will be kept in /somewhere/on/filesystem/my_repo/./mw-osm-temp

    Importing into GeoGig repo...
    1,164,420
    1,164,420 entities processed in 5.892 min

    Building trees for [node, way]

    Trees built in 7.614 s
    0%
    Staging features...
    100%

    Committing features...
    100%
    Processed entities: 1,164,420.
     Nodes: 1,091,572.
     Ways: 72,848

GeoGig stores data in *trees* which are basically equivalent to *layers* in a normal geospatial context. At this point in the process, your repo contains 2 trees for *ways* and *nodes* from OSM. In order to convert these into layers that may be more familiar to your users like *roads*, *buildings* or *medical facilities*, you will need to apply a mapping that filters the complete list of nodes and ways and converts the tags into attributes. There are a great set of sample mappings in the US State Departments CyberGIS project. You can find them at this `link <https://github.com/state-hiu/cybergis-osm-mappings/tree/master/mappings>`_. You should clone this repository along side your GeoGig repository and then apply them as shown below::

    $ geogig osm map ../cybergis-osm-mappings/mappings/basic/buildings_and_roads.json

    $ geogig osm map ../cybergis-osm-mappings/mappings/health/medical_centers.json

    $ geogig osm map ../cybergis-osm-mappings/mappings/education/schools.json

Now you can inspect the repository using the following commands::

    $ geogig ls-tree
    osm_roads
    osm_buildings
    node
    way

    $ geogig show osm_roads
    TREE ID:  596a4f39ab9fadcbba6ffcaf5c135e29c2bc67d3
    SIZE:  20288
    NUMBER Of SUBTREES:  0
    DEFAULT FEATURE TYPE ID:  0f7cbc6c114727858fb50668eb8a4448667bdc12

    DEFAULT FEATURE TYPE ATTRIBUTES
    id: <LONG>
    geom: <LINESTRING>
    status: <STRING>
    media: <STRING>
    name: <STRING>
    ref: <STRING>
    highway: <STRING>
    lanes: <STRING>
    oneway: <STRING>
    surface: <STRING>
    access: <STRING>
    source: <STRING>
    motor_vehicle: <STRING>
    nodes: <STRING>

Updating the OSM Data in your Repository
++++++++++++++++++++++++++++++++++++++++

As OpenStreetMap is a constantly changing dataset, you will want to periodically update your repo with the latest changes from OSM. GeoGig provides a way to do this using the *geogig osm download* command with the --update flag::

    $ geogig osm download --update

.. note:: If you get an error that looks like the error below, this means that there are no changes in OSM since your last update and it can be ignored.

    Committing features...

    An unhandled error occurred: Nothing to commit after f249200302d5e808fb1b04f329b39b5853ffb7d0. See the log for more details.

Serving your GeoGig repository in GeoNode
+++++++++++++++++++++++++++++++++++++++++

At this point you have different options on how to serve this repository from your GeoNode. The most basic option is to *export* this data to PostGIS and configure the PostGIS database in GeoServer for use in GeoNode. First create a PostGIS database that will be used to store the data and then use the `geogig pg export command <http://geogig.org/manpages/pgexport.html>`_ to export the layers into this database for serving. Note you will need to replace the connection parameters below to match you r servers setup::

    $ geogig pg export --host localhost --port 5432 -- schema myschema --database my_osm_database --user my_user --password my_password osm_train_stations osm_train_stations

Define your new primary key for the table we can't export (id is the osm id)::

    INSERT INTO gt_pk_metadata_table (table_schema, table_name, pk_column) VALUES ('geogig_data','osm_train_stations','id');

Next you need to alter your OSM data table accordingly::

    ALTER TABLE geogig_data.osm_train_stations DROP CONSTRAINT osm_train_stations_pkey;

    ALTER TABLE geogig_data.osm_train_stations ADD PRIMARY KEY (id);

    ALTER TABLE geogig_data.osm_train_stations DROP COLUMN fid;

    ALTER TABLE geogig_data.osm_train_stations ADD COLUMN fid character varying(64);

Then you can run the *geogig pg export* command with the -o option to overwrite the table::

    $ geogig pg export -o --host localhost --port 5432 -- schema myschema --database my_osm_database --user my_user --password my_password osm_train_stations osm_train_stations

At this point, you need to configure your PostGIS database connection in GeoServer. More information about this process can be found in the `GeoServer documentation <http://docs.geoserver.org/stable/en/user/data/database/postgis.html>`_.

Once the layers are configured in GeoServer. You want to issue the updatelayers to configure them in your GeoNode::

    $ python manage.py updatelayers --store geogig_data --filter osm_train_stations

Using the GeoGig GeoServer Extension
++++++++++++++++++++++++++++++++++++

The GeoGig project also contains a GeoServer extension that allows a GeoServer administrator to configure and serve the GeoGig store directly. This extension basically lets you treat your GeoGig repository as any other store of spatial data.

.. note:: This section is still to be completed.

Using the osm-extract script to download OSM Data into PostGIS
--------------------------------------------------------------

osm-extract is a script that allows to download data from OpenStreetMap, perform ETL procedures in order to classify data into layers and publish it in a PostgreSQL+PostGIS database.
It is based on a fork from Terronodo and it is built around a Makefile with instructions that must be executed with the Linux make command (we assume you are working on a Linux based OS).
Once OSM data have been loaded into PostGIS, they can be published in GeoNode.

The script processes the whole .pbf file provided in input, therefore the processing extent depends on the bounding box of the .pbf file itself.
In addition data can be updated on a fixed frequency, by executing the Makefile with a scheduled cron job. In such case a sql instruction can be executed in order to update the publication date of the respective metadata published by GeoNode.

Steps for putting it in production
++++++++++++++++++++++++++++++++++
#. Download the repo
#. Install the dependencies: osmosis. (GeoNode  is assumed to be up and running)
#. Launch the Makefile for the first time
#. Publish the layers in GeoNode, update_layers
#. Customize the sh file
#. Customize the SQL file
#. Schedule the shell file as a cron job

**1. Download the repo**::

  git clone https://github.com/MalawiGeospatialTools/osm-extract.git

**2. Install the dependencies**

We assume that GeoNode is already installed on your machine.
In addition to that you need to install osmosis, which is used by the Makefile to handle OSM data.
In order to do so, follow the instructions at `Installing pre-built Osmosis <http://wiki.openstreetmap.org/wiki/Osmosis/Installation#Linux>`_

**3. Launch the Makefile for the first time**

Set the current directory to the directory where the Makefile is stored.
Then launch it by typing the following command::

  make all NAME=<country> URL="<Planet.osm mirror>"

Substitute in the command *<country>* with the name of your country of interest (e.g. *malawi*), if you're working on a specific country (the name is used for naming the staging files created by the procedure).

Also replace *<Planet.osm mirror>* with one of the mirrors listed in http://wiki.openstreetmap.org/wiki/Planet.osm#Downloading; make sure that the mirror publishes extracts in .pbf format. One handy mirror is http://download.openstreetmap.fr/extracts, which published data on a country or area basis: this allows to reduce the processing steps to a single country or area of interest.

The procedure is going to create a new database in your PostgreSQL instance and store in it the OSM data for your country. Therefore you should run the Makefile with a user that has enough privileges.

The features and attributes to be included in each table and consequently in each GeoNode layer are defined in configuration files which are stored in the conf directory.

A few indications on the computing resources: 30 seconds of computing time are required for processing a .pbf file sized 38MB (the country of Malawi) with an Amazon m3 medium instance (1 Intel Xeon E5-2670 CPU, 3.75GB RAM).

**4. Publish the layers in GeoNode**

We propose to do so in two steps: firstly publish the layers in GeoServer and then in GeoNode.
In GeoServer generate a new Store so that you can keep it separate from the default GeoNode Store. Then publish the layers of your interest from the ones that were created by the procedure at the previous step (please note that some of them may be empty, depending on the country of interest).
In GeoNode take advantage of the updatelayers command and publish all layers from the GeoServer Workspace created ad-hoc at the previous step. See the `updatelayers documentation <http://docs.geonode.org/en/master/tutorials/admin/admin_mgmt_commands/>`_ for details.

**5. Customize the sh file**

Customize the osm_update.sh file in order to fit your server and software configuration, namely:

- define the installation path (on line 3) for the osmosis software, so that it can be found by the OS
- change the current directory to a working directory of your interest, where temporary files can be stored, deleted and updated (on line 4)
- define the name of the country of interest as well as the url (on line 6) as you did in step 3

**6. Customize the SQL file**

Customize the set_pub_date.sql file in order to fit it for your purpose. In particular substitute the store name *osm_extracts* with the name of the store in which your OSM data are in GeoServer.

**7. Schedule the shell file as a cron job**

Insert the osm_update.sh file in the crontab of your server as a scheduled job. In order to do so, please have a look at the official cron documentation. If you‚Äôre using Ubuntu OS, please have a look `here <https://help.ubuntu.com/community/CronHowto>`_.
