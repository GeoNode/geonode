.. _paver:

=====================
Pavement.py and Paver
=====================

`Paver <http://pythonhosted.org/Paver/>`_ is a python module that automates repetitive tasks like running documentation generators, moving files around,
testing and downloading things using the convenience of Pythonâ€™s syntax and massive library of code.  GeoNode comes with several
paver tasks which save administrators and developers from having to manually perform repetitive operations from the command line.
The tasks are stored in the pavement.py file in your GeoNode root directory and can be run with ```paver <task_name>``` from that directory.

Pavement Tasks
==============
Here's a list of Pavement tasks maintained by the GeoNode development team.

deb
---
```paver deb```

Creates debian packages.

Use the ``key`` option (or its shorter version ``-k``) to specify the GPG key to sign the package with.

Use the ``ppa`` option (or its shorter version ``-p``) to specify the PPA the package should be published to.

package
-------
```paver package```

Creates a distributable tarball for GeoNode.

reset
-----
```paver reset```

Resets the GeoNode development environment by deleting the development database and re-deploying the Geoserver data directory.

reset_hard
----------
```paver reset_hard```

Cleans the local GeoNode git repository and removes untracked directories.

test
----
```paver test```

Runs the GeoNode unit tests.

test_integration
----------------
```paver test_integration```

Runs the GeoNode integration tests.

setup
-----
```paver setup```

Installs GeoNode's Python dependencies using pip.

setup_data
----------
```paver setup_data```

Loads sample gis data from the gisdata python package.

Use the ``type`` option (or its shorter version ``-t``) to only import a specific data type.  Supported types are "vector", "rastor", and "time."

setup_geoserver
---------------
```paver setup_geoserver```

Downloads Geoserver and the Jetty Runner and then moves the Geoserver data directory to the correct location.

start
-----
```paver start```

Starts the GeoNode development web server and Geoserver.

start_django
------------
```paver start_django```

Starts the GeoNode development web server on the local machine.

Use the ``bind`` option (or its shorter version ``-b``) to bind the development server to a specific IP address and port number.

start_geoserver
---------------
```paver start_geoserver```

Runs the local Geoserver using Jetty.

stop
----
```paver stop```

Stops the GeoNode development web server and Geoserver.


stop_django
-----------
```paver stop_django```

Stops the GeoNode development web server.

stop_geoserver
--------------
```paver stop_geoserver```

Stops Geoserver.

sync
----
```paver sync```

Synchronizes the database according the GeoNode models and loads the GeoNode sample data.

static
------
```paver static```

.. note:: This task requires the `Node Package Manager <https://npmjs.org/>`_ to be installed.

Downloads and installs GeoNode's static file dependencies and creates the production assets.

upgrade_db
----------
```paver upgrade_db```

Updates database schemas from legacy GeoNode versions.

Use the ``version`` option (or its shorter version ``-v``) to specify the GeoNode version when running this task.

