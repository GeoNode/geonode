.. _install_devmode:

Install GeoNode for Development
===============================


In order to install Geonode 2.0 in developing mode on Ubuntu 12.04 the following steps are required:

For Windows: (:ref:`win_devinstall`)

#. Retrieve latest apt-get list
#. Install build tools and libraries
#. Install dependencies (Python, Postgresql and Java) and supporting tools
#. Add Nodejs PPA and other tools required for static development
#. Set up a virtual environment (virtualenv)
#. Clone geonode from github and install it in the virtual environment
#. Run paver to get install geoserver and start the development servers
#. Compile and Start the server
#. Start Geonode instance
#. To stop the server
#. Next create a superuser for your django geonode

.. note:: The following steps have to be executed in your terminal. The steps have to be done as a root user, therefore don´t forget to type sudo in front!

#. Retrieve latest apt-get list

   .. code-block:: console
  
    $ sudo apt-get update
    

#. Install build tools and libraries

   .. code-block:: console

    $ sudo apt-get install -y build-essential libxml2-dev libxslt1-dev libpq-dev zlib1g-dev


#. Install dependencies

   *Python native dependencies*

   .. code-block:: console

    $ sudo apt-get install -y python-dev python-imaging python-lxml python-pyproj python-shapely python-nose python-httplib2 python-pip python-software-properties

   *Install Python Virtual Environment*

   .. code-block:: console

    $ sudo pip install virtualenvwrapper

   *Postgresql*

     .. code-block:: console

      $ sudo apt-get install postgresql-9.3-postgis-2.1 postgresql-9.3-postgis-scripts

     Change postgres UNIX password

     .. code-block:: console

      $ sudo passwd -u postgres # change password expiry infromation
      $ sudo passwd postgres # change unix password for postgres

     Create geonode role and database

     .. code-block:: console

      $ su postgres
      $ createdb geonode
      $ psql
      postgres=#
      postgres=# \password postgres
      postgres=# CREATE USER geonode WITH PASSWORD 'geonode'; # should be same as password in setting.py
      postgres=# GRANT ALL PRIVILEGES ON DATABASE "geonode" to geonode;
      postgres=# \q


   *Java dependencies*

   .. code-block:: console

    $ sudo apt-get install -y --force-yes openjdk-6-jdk ant maven2 --no-install-recommends

   *supporting tools*

   .. code-block:: console

    $ sudo apt-get install -y git gettext



#. Set up a virtual environment

   Here is where Geonode will later be running.

   Add the virtualenvwrapper to your new environement.


      .. code-block:: console

       $ export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python
       $ export WORKON_HOME=~/.venvs
       $ source /usr/local/bin/virtualenvwrapper.sh
       $ export PIP_DOWNLOAD_CACHE=$HOME/.pip-downloads

   On Ubuntu, you can add the above settings to your .bashrc file and reload the settings running

   .. code-block:: console

    $ source ~/.bashrc

   Set up the local virtual environment for Geonode

      .. code-block:: console

       $ mkvirtualenv geonode
       $ workon geonode

      This creates a new directory where you want your project to be and creates a new virtualenvironment

#. Get the code

   To download the latest geonode version from github, the command *clone* is used

   .. code-block:: console

    $ git clone https://github.com/GeoNode/geonode.git

#. Add Nodejs PPA and other tools required for static development

   This is required for static development

   .. code-block:: console

    $ sudo add-apt-repository -y ppa:chris-lea/node.js
    $ sudo apt-get update
    $ sudo apt-get install -y nodejs
    $ cd geonode/static
    $ npm install --save-dev

    # If the last command does not work, you can run it manually like this:

    $ npm install bower --save-dev
    $ npm install grunt-cli --save-dev
    $ npm install grunt-contrib-jshint --save-dev
    $ npm install grunt-contrib-less --save-dev
    $ npm install grunt-contrib-concat --save-dev
    $ npm install grunt-contrib-copy --save-dev
    $ npm install grunt-text-replace --save-dev
    $ npm install grunt-contrib-uglify --save-dev
    $ npm install grunt-contrib-cssmin --save-dev
    $ npm install grunt-contrib-watch --save-dev

    
   Every time you want to update the static files after making changes to the sources, go to geonode/static and run 'grunt production'.

#. Install GeoNode in the new active local virtualenv

   .. code-block:: console
   
    $ pip install -e geonode --use-mirrors
    $ cd geonode
    
   If the install fails because of an error related to pyproj not being verified (happens on pip 1.5), use the following:
    
   .. code-block:: console
    
     $ pip install -e geonode --use-mirrors --allow-external pyproj --allow-unverified pyproj 

#. Compile and Start the server

   The last step is to compile GeoServer and setup

   .. code-block:: console

    $ paver setup

#. Now we can start our geonode instance

   .. code-block:: console

    $ paver start

   Visit the geonode site by typing http://localhost:8000 into your browser window.

   If you are using a different IP address (e.g 1.1.1.1), then start paver using the command below.

   .. code-block:: console

    $ paver start -b 1.1.1.1:8000
   
   If the start fails because of an import error related to osgeo, then please consult the `GDAL for Development Guide <http://docs.geonode.org/en/latest/tutorials/devel/install_devmode/gdal_install.html>`_. 

#. To stop the server

   type hold **Ctrl c**  on your keyboard to stop the server

   now type:

   .. code-block:: console

    $ paver stop    # to stop all django, geoserver services

#. Next create a superuser for your django geonode

   Create a superuser so you can log on to your local geonode installation at http://localhost:8000

   .. code-block:: console

       $ django-admin.py createsuperuser –-settings=geonode.settings

Start working on Geonode the next day after install
===================================================

   With every restart of your machine, you have to restart geonode as well. That means, you will not be able to open http://localhost:8000   directly after starting your machine new. In order to be able to use geonode now, you have to activate your virtualenvironment and to start the development servers. 

   .. note:: *username* is the name of your machine and personal folder!

   #. Activate virtualenv

      To activate your virtualenv you just need to type

      .. code-block:: console

       $ workon geonode

      .. todo:: this is not working for me!!! My steps still have to be

      or

      .. code-block:: console

       $ source /home/username/.venvs/geonode/bin/activate

      .. note:: Be careful with the path, it might not be the same for you!

   #. Start the server

      .. code-block:: console

       $ cd geonode
       $ paver start_geoserver
       $ paver start_django

      Now you are able to access http://localhost:8000 again.

      .. note:: Remember that you have to do these steps each time you restart your machine!!

.. hint:: Now you've followed these installation instructions, geonode is running in development mode. This also means that you are using all the default settings of geonode. If you want to change them, e.g use Tomcat instead of Jetty, or Postgresql instead of sqlite3, you may follow the steps from the section **Configure Manually** in :ref:`custom_install`.

.. toctree::
   :maxdepth: 1

   /admin/install/complete_install

