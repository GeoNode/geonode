.. _install_geonode_application:

========================
Install the dependencies
========================

In this section, you are going to install all the basic packages and tools needed for a complete GeoNode installation. To follow this guide a basic knowledge about Ubuntu Server configuration and working with a shell is needed. This guide uses vim as the editor fill free to use nano, gedit or others.


Create a Dedicated User
=======================

We will use example.com as fictitious Domain Name.
Further a (sudo) User ‘geonode’ for running commands and our GeoNode project will be named my_geonode.

Create User geonode if not present:

.. code-block:: bash

    ssh root@example.com
    
    # Follow the prompts to set the new user'''s information. 
    # It is fine to accept the defaults to leave all of this information blank.
    sudo adduser geonode
    sudo usermod -aG sudo geonode
    
    # make sure the newly created user is allowed to login by ssh
    # (out of scope of this documentation) and switch to User geonode
    su geonode


Packages Installation
=====================

First, we are going to install all the software packages we are going to need
for the GeoNode setup. 

.. code-block:: bash

    # Install Openjdk
    sudo -i apt update
    sudo apt install openjdk-8-jdk-headless default-jdk-headless -y
    sudo update-java-alternatives --set /usr/lib/jvm/java-1.8.0-openjdk-amd64

    # Install packages from GeoNode core 
    apt_packages="$VIRTUAL_ENV/src/geonode/apt-packages.txt"
    apt-get install $(grep -vE "^\s*#" $aptpackages | tr "\n" " ")

    sudo apt update;
    sudo apt upgrade;
    sudo apt autoremove;
    sudo apt autoclean;
    sudo apt purge;
    sudo apt clean

.. note:: The installation process is going to take several minutes and it will need to download packages.

GeoNode Installation
====================
Next we need to prepare a new Python Virtual Environment:

.. code-block:: bash

    pip install virtualenv
    # The commands above will install the Python Venv packages

    mkdir ~/.venv
    virtualenv ~/.venv/my_geonode
    # Through this command we have created a new Virual Environment for GeoNode


Let's activate the new `my_geonode` Python Virtual Environment, and make sure we're starting
in the users home directory.

.. code-block:: bash

    source ~/.venv/my_geonode/bin/activate
    cd ~

We are going to install GeoNode as a dependency of a **Customized Django Project**

.. note::
    A custom project is a Django application with *ad hoc* configuration and folders, which allows you to
    extend the original **GeoNode** code without actually dealing or modifying the main source code.

    This will allow you to easily customize your GeoNode instance, modify the theme, add new functionalities and so on,
    and also being able to keep updated with the GeoNode latest source code.

    For more deails please check https://github.com/GeoNode/geonode-project/tree/master

.. code-block:: bash

    pip install Django==1.11.*
    git clone https://github.com/GeoNode/geonode-project.git -b master
    django-admin startproject --template=./geonode-project -e py,rst,json,yml,ini,env,sample -n Dockerfile my_geonode

Let's install the GeoNode dependencies and packages into the Python Virtual Environment:

.. code-block:: bash

    cd my_geonode
    pip install -r requirements.txt --upgrade;
    pip install -e . --upgrade --no-cache
    # Install correct gdal version 
    GDAL_VERSION=$(gdal-config --version)
    PYGDAL_VERSION="$(pip install pygdal==$GDAL_VERSION 2>&1 | grep -oP '(?<=: )(.*)(?=\))' | grep -oh $GDAL_VERSION\.[0-9])"
    pip install pygdal==$PYGDAL_VERSION

In the next section we are going to setup PostgreSQL Databases for GeoNode.
