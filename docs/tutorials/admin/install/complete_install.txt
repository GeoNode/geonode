.. _complete_install:

===========================
Complete Installation Guide
===========================

.. note:: While we intend to provide a detailed, accurate explanation of the installation process, it may become out of date. If you run into problems with the process described in this document, please don't hesitate to let the GeoNode team know so we can keep it up to date.

This page describes a generic installation process for GeoNode. This manual installation is intended for who are comfortable with Linux system administration. Basically there are two ways to install GeoNode manually.

	#. The first one is by using the automated script provided. This option is strongly recommended for everyone who simply wants a 	customized installation of GeoNode.

	#. The second one is fully manual and lets you have the complete control over the components but is also more complicated.

The sections on the *Recommended Minimum System Requirements* and the *Installing Dependencies* section is valid for both kinds of installations. Also the first part of the section *Installation GeoNode* has to be done in both installation methods. After these initial steps, the methods differ from each other and you have to choose wich one suits you best.

.. note:: The :ref:`quick_installation`  is easier to use.

Recommended Minimum System Requirements
---------------------------------------

For deployment of GeoNode on a single server, the following are the *bare minimum* system requirements:

* 6GB of RAM, including swap space.
* 2.2GHz processor.  (Additional processing power may be required for multiple concurrent styling renderings)
* 1 GB software disk usage.
* Additional disk space for any data hosted with GeoNode and tiles cached with GeoWebCache.
  For spatial data, cached tiles, and "scratch space" useful for administration, a decent baseline size for GeoNode deployments is 100GB.
* 64-bit hardware recommended.

Installing Dependencies
-----------------------

Some external software must be installed before you can install GeoNode. The GeoNode package contains both the Java and Django web application code for GeoNode, but requires some external software installed to complete the GeoNode platform.

This includes:

* A Python interpreter
* A Java Runtime Environment (JRE)
* Apache Tomcat servlet container
* Python development libraries
* PostgresQL database
* The GDAL, GEOS, and OGR geospatial software libraries

For convenience, appropriate commands to retrieve these dependencies on Ubuntu 12.04 LTS are listed below::

    $ sudo apt-get install python python-support python-dev python-virtualenv openjdk-6-jre tomcat7 postgresql-9.1 postgresql-contrib-9.1 gcc patch zip python-imaging gdal-bin libgeos-dev python-urlgrabber python-pastescript gettext postgresql-contrib postgresql-9.1-postgis libpq-dev unzip libjpeg-dev libpng-dev python-gdal libproj-dev python-psycopg2 apache2 libapache2-mod-wsgi git-core gettext libxml2-dev libxslt-dev

.. todo:: is this the complete and up-to-date list of dependencies??

Beware that in case of use of postgres 9.2 as described in :ref:`install_postgresql` and :ref:`install_postgis` all the postgres and postgis references must be removed from the above command!

.. note:: Before you copy the command into the terminal and run it, check the versions, you might have to adjust them!

.. note:: Be sure that you've installed all the required dependencies before you go further with the installation of GeoNode.

Installing GeoNode
------------------

After installing the needed dependencies the next steps are to download the code and to set up GeoNode. The stack used is:

* *Servlet Container*: Apache Tomcat
* *Static File Server*: Apache httpd
* *Python/WSGI Container*: mod_wsgi
* *Django Database*: PostgresQL

.. note:: The following four steps are the same for both types of installations!

First of all, you have to get the code:

.. code-block:: console

    $ git clone https://github.com/GeoNode/geonode.git
    $ cd geonode
    $ sudo pip install -e .					# this installs django etc.
    $ sudo paver setup						# this downloads geoserver.war

Now you have to choose between one of the two methods to finish the installation of GeoNode:

#. Installation using the ubuntu config file
#. Fully Manual Installation

Installation using the ubuntu config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	The package comes with a semi-automatic installer, located in the unzipped directory. The installer script **(located in package/  		install.sh)** has a configuration file **(located in package/support/config-ubuntu.sh)** associated with it which allows you to 	provide the details of your installation, such as where your webserver looks for documents. Therefore you need to adjust the 
	conifg-ubuntu.sh file according to your needs before you run the installation. Also note that you might have to change the postgresql 		and postgis version in this file, according to the versions you use! 

	Once edited (if necessary) the config file running the following commands will install GeoNode::

    	$ cd package
    	$ sudo ./install.sh support/config-ubuntu.sh
    	$ sudo cp downloaded/geoserver.war /var/lib/tomcat7/webapps
    	$ sudo geonode-updateip youraddress
    	$ geonode createsuperuser

	GeoNode can now be accessed at http://localhost

	.. note:: Before proceed with the installation make sure to install the needed :ref:`dependencies`.

Fully Manual Installation
~~~~~~~~~~~~~~~~~~~~~~~~~

	This section is mostly intended for packagers working on installers for GeoNode on new platforms. This method can be done with every 		GeoNode release, both official and custom made. It’s suitable for servers that already have some of the components installed such as 		Tomcat, Apache with virtualhosts already configured.

	.. note:: If the server has a fresh Ubuntu installation it’s strongly suggested instead to adjust the *package/support/config-ubuntu.sh* script to match the desired installation paths.

	Trying

	.. code-block:: console

    		$ sudo paver start

	will start GeoNode at http://localhost/. But until now, GeoNode is running with the default configurations, e.g it uses Jetty as 	 servlet container and sqlite3 as database. Also GeoNode won't start without using the command above. Changing this, the following 		configurations on the used components have to be done.

#. **Make directories**

	First of all you have to make the directories and copy some things into it. Do I really have to do this? 	

#. **Configure Postgresql and Postgis**

	Until now GeoNode uses sqlite3 as the default db. The following steps will show you how to make geonode to use postgresql and postgis.

		**Create geonode user and database**

   		First of all a user called *geonode* (with password *geonode*), as well as a database called *geonode* has to be created.

   		To create the user:

   		.. code-block:: console

    			$ sudo -u postgres createuser -P geonode

  		Now you will be asked to enter a password. This must be *geonode* (you can change it if you want to, but be aware that you 			have to edit the local_settings.py if you do so!)

   		To create the databases (the geonode one and the spatial for shapefile imports):

   		.. code-block:: console

    			$ sudo -u postgres createdb -O geonode geonode
   			$ sudo -u postgres createdb -O geonode geonode-imports
    			$ sudo su postgres
    			$ psql -f /usr/share/postgresql/9.1/contrib/postgis-1.5/postgis.sql geonode-imports
    			$ psql -f /usr/share/postgresql/9.1/contrib/postgis-1.5/spatial_ref_sys.sql geonode-imports
    			$ psql -d geonode-imports -c 'GRANT ALL ON geometry_columns TO PUBLIC;'
    			$ psql -d geonode-imports -c 'GRANT ALL ON spatial_ref_sys TO PUBLIC;'
    			$ exit

    
   		This creates a db called *geonode* and *geonode-imports* (which automatically has the postgis extension as well!) with owner 			*geonode*.


		**Change authentication method**

  		In the postgres config path, */etc/postgresql/9.2/main*, you should find the file *pg_hba.conf*. This file has to be edited in 			order to allow the geonode user to have access to the database. Therfore change the directory to this file and open it

   		.. code-block:: console

   			$ cd /etc/postgresql/9.1/main
    			$ sudo vi pg_hba.conf

  		The file should contain the following default settings until now:

   		.. figure:: img/pg_hba_detail.png

   		and then set the authentication method of the following entry from *peer* to *trust*::

    			#TYPE	DATABASE    USER    METHOD
    			local   all	    all     md5

   		After changing this file, the postgres service has to be restarted. This is essential, because otherwise the changed 			configurations won't be considered!

   		To restart the postgresql server type

   		.. code-block:: console

    			$ sudo service postgresql restart

   		.. note:: service could be also called postgresql-9.1 or postgresql-9.2 depending on your installation

   		Additional entry::
    
    			#Type   DATABASE    USER    ADDRESS     METHOD
    			host    geonode     geonode 127.0.0.1/32    md5

		**Setup local settings**

   		The next step is to set the local settings. 

		In the directory ../geonode/geonode a file called *local_settings.py.sample* exists. It includes all the 			settings to change the default db from *sqlite3* to *postgresql*. Rename the file to *local_settings.py*.

   		.. code-block:: console

    			$ sudo mv geonode/local_settings.py.sample geonode/local_settings.py
    
   		Uncomment the line 10 and modify the line 12 as follows::

    		'ENGINE': 'django.contrib.gis.db.backends.postgis',
    		'NAME': 'geonode-imports',

    		.. note:: If you do not use *geonode* as password for your database, then you have to edit the local_settings.py and change 			your password in this part of the file

   		Add the following as a directive::

    			ALLOWED_HOST = ['domain or IP']

		**Synchronise db**

   		To synchronise the database call the django command *syncdb*

   		.. code-block:: console

    			$ python manage.py syncdb --noinput --all


#. **Django configurations**

	The **Django** frontend can be served in various ways, one of the most performant is Apache httpd with mod_wsgi installed.

     	You will also need a web server capable of simply serving static files; if you are using Apache httpd it can serve this purpose as 		well.

	.. note:: The Django project has further documentation on how to serve Django applications at https://docs.djangoproject.com/en/1.5/howto/deployment/ .

	Before the webserver will be configured, some other steps are needed to execute.

		**Create new superuser**

		A new django superuser has to be created

		.. code-block:: console

   			$ python manage.py createsuperuser

		You will be asked to enter a username, an email adress and a password.

		**Create local static files**

		The collectstatic command will create a new folder *static_root*.

		.. code-block:: console

   			$ python manage.py collectstatic

		**Enable geonode upload function**

		An empty folder called *uploaded* must be created

		.. code-block:: console

   			$ sudo mkdir -p /home/user/geonode/geonode/uploaded
   
		When using apache webserver change owner to www-data

		.. code-block:: console
   
   			$ sudo chown www-data -R /home/user/geonode/geonode/uploaded

#. **Webserver configurations (Apache and mod_wsgi)**

		**Make apache to load the mod_wsgi module**

   		If you've done the installation from above, you should already have a *httpd.conf* file that includes one line

   		.. code-block:: python

      			LoadModule wsgi_module /path/to/modules/mod_wsgi.so

  		 .. note:: If you do not already have this, then please add this line to *httpd.conf* now!

   		Beside this module you also have to enable the proxy module. This can be done very easily using

   		.. code-block:: console

      		 	$ sudo a2enmod proxy_http

  		We have to create one more configuration file for geonode. Go to the folder *sites-available* and create a file called 			*geonode*

   		.. code-block:: console

       			$ cd /etc/apache2/sites-available
       			$ sudo gedit geonode

   		This file should inlcude the following, but don´t forget to adjust the paths!

   		.. code-block:: python

     			WSGIDaemonProcess geonode python-path=/home/user/geonode:/home/user/.venvs/geonode/lib/python2.7/site-packages user=www-data threads=15 processes=2

      			<VirtualHost *:80>
        			ServerName http://localhost
        			ServerAdmin webmaster@localhost
        			DocumentRoot /home/user/geonode/geonode

        			ErrorLog /var/log/apache2/error.log
        			LogLevel warn
        			CustomLog /var/log/apache2/access.log combined

        			WSGIProcessGroup geonode
        			WSGIPassAuthorization On
        			WSGIScriptAlias / /home/user/geonode/geonode/wsgi.py

        			<Directory "/home/user/geonode/geonode/">
           			Order allow,deny
            			Options Indexes FollowSymLinks
            			Allow from all
            			IndexOptions FancyIndexing
        			</Directory>

        			Alias /static/ /home/user/geonode/geonode/static/
        			Alias /uploaded/ /home/user/geonode/geonode/uploaded/

        			<Proxy *>
            			Order allow,deny
            			Allow from all
        			</Proxy>

        			ProxyPreserveHost On
        			ProxyPass /geoserver http://localhost:8080/geoserver
        			ProxyPassReverse /geoserver http://localhost:8080/geoserver

      			</VirtualHost>

		**Enable the new site**

   		.. code-block:: console

       			$ sudo a2ensite geonode

   		This command will create a file *geonode* in the folder *sites-enabled*.

		**Now reload apache**

   		.. code-block:: console

       			$ sudo service apache2 reload

   		If you now type localhost into your webbrowser, the geonode webpage will appear. You can now login with your newly created 			superuser account. But if you try to attend the django admin interface, you will only see the content of this webpage but 			without any design. To change this, you have to change the following entry in our geonode configuration file

   		.. code-block:: console

       			$ sudo gedit /etc/apache2/sites-available/geonode

   		Change this entry::

       			Alias /static/ /home/user/geonode/geonode/static/
    
   		to::

       			Alias /static/ /home/user/geonode/geonode/static_root/

		**Now reload apache2**

   		again using ``sudo service apache2 reload`` and visit localhost/admin. Now you should be able to see this

   		.. figure:: img/admin_interface.PNG

#. **Change permissions of folders**

   	.. code-block:: console

       		$ sudo chown www-data:www-data /home/user/geonode/geonode/static/
       		$ sudo chown www-data:www-data /home/user/geonode/geonode/uploaded/
       		$ sudo chown www-data:www-data /home/user/geonode/geonode/static_root/

       		$ sudo service apache2 reload

#. **Configure application server**
	
	The **GeoServer** web application must be served using a *Java Servlet container*; two popular and free containers are Jetty and 	 Tomcat. Jetty is used as default in your GeoNode installation. Typically a Java web application (WARs) can be deployed by simply 	 copying the .war file into the appropriate place. So if you are going to use Tomcat instead, then copy the geoserver.war file into 		Tomcats webapps directory, as shown in the steps below.
        
		**Deploy your geoserver with Tomcat**

   		To do so we need Tomcat installed and *not* running. So if you've got Tomcat running at the moment, stop it

   		.. code-block:: console

       			$ sudo /etc/init.d/tomcat7 stop
    
   		You can find the *geoserver.war* in the folder downloaded in your geonode directory::

       			geonode/downloaded/geoserver.war

   		Now copy this file into the *webapps* folder of tomcat

   		.. code-block:: console

       			$ sudo mv geonode/downloaded/geoserver.war /var/lib/tomcat7/webapps/
    
   		By starting tomcat it will unpack the geoserver.war and create a new directory ``tomcat/webapps/geoserver``.

   		.. code-block:: console

       			$ sudo /etc/init.d/tomcat7 start
    
   		Let´s try to attend http://localhost:8080/geoserver or localhost/geoserver. You will now see the geoserver homepage.

   		.. figure:: img/geoserver_webpage.PNG

questions:

- some configuration in geonode to tell him where he can reach geoserver and vice versa. # ???
- some optimizations (optimize the java virtual machine, web server, database) # ???
- optionally a metadata catalogue like geonetwork (we use an internal pycsw) # ???
- paths?!
- geoserver with geonode extension (needed?)

GeoServer with GeoNode Extensions
---------------------------------

GeoNode's GeoServer integration requires some specific extensions to help
GeoNode in managing GeoServer layers.  GeoNode releases include a GeoServer WAR
archive with these extensions pre-installed.  However, some manual
configuration may still be needed in case of not standard installation.

Steps
.....
 #. *Configure* GeoServer with the location of the GeoNode site, used for
    authentication (so that GeoServer can recognize logins from the main site).
    This setting defaults to http://localhost:8000/, so if you are running
    the GeoNode Django application on a different port, or on a different server
    from the one running GeoServer, then you will need to change this by adding
    a block of XML to ``WEB-INF/web.xml`` within the unpacked application
    directory, like so::

       <context-param>
           <param-name>GEONODE_BASE_URL</param-name>
           <param-value>http://localhost/</param-value>
       </context-param> 

   The ``<param-value>`` tag should enclose the URL to the Django application
   homepage.

