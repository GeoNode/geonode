.. _geonode_monitoring:

GeoNode Monitoring
==================

.. contents::
   :depth: 4

Internal Monitoring Application (geonode.contrib.monitoring)
------------------------------------------------------------

.. note:: This application requires MaxMind's GeoIP database file.

Base concepts and objects
~~~~~~~~~~~~~~~~~~~~~~~~~

 GeoNode monitoring is a configurable monitoring application, that allows internal resources and hardware resources monitoring for GeoNode installations, including GeoServer deployments.

 Monitoring application is configurable, so different deployment scenarios could be handled - from GeoNode and GeoServer running on single host, through distributed installations, where GeoServer is deployed to several hosts.

 Monitoring application uses three base entity classes to describe elements of reality: Host, Service Type and Service. 

 * Host is an object describing physical (or virtual) instance of operating system on which GN or GS is running. This object exists only for grouping and is not used directly by monitoring. 

 * Service Type is a description of kind of Service. Depending on service type, different metrics are stored, and different data collection mechanisms are used. Additionally, for system monitoring, it's not conducted directly, but with GeoNode or GeoServer as monitoring agent. That means, no additional software installation is needed to monitor system, but also, hosts that don't have GeoNode or GeoServer installed, won't be monitored. There are four service types:
   
   * hostgeonode, hostgeoserver - those types describe system monitoring probes that are running with GeoNode or GeoServer respectively,

   * geonode, geoserver - application-level probes that monitor one specific GeoNode or GeoServer instance.

 * Service describes one specific instance of probe, either host-level or application-level. Service references Host and Service Type. Each service must be named, and name should be system-wide unique.

 As mentioned above, each Service Type keeps a set of metrics, specific for that type. A metric is a description of measured value, for example: number of requests, response size or time, cpu usage, free memory etc. Each Service Type has it's own metrics set. Metric value may be either value counter (like country of user), numeric counter (like number of requests) or rate (like bytes in/out on network interface).

 Besides metric data, monitoring will also store exception information for exceptions that were captured during request handling. 

 Data are collected periodically (at most every 1 minute), aggregated and stored in aggregated form. User can see data from predefined relative periods (last minute, last 10 minutes, last hour, last day, last week).

 User can enable and configure automated checks, which will be run after each collection/aggregation cycle, and will emit notifications if metric values in that run exceed configured thresholds.


Installation
~~~~~~~~~~~~

 * enable ``MONITORING_ENABLED`` flag
 * ensure that following code is in your settings:

.. code:: python

  MONITORING_ENABLED = True
  # add following lines to your local settings to enable monitoring
  if MONITORING_ENABLED:
      INSTALLED_APPS += ('geonode.contrib.monitoring',)
      MIDDLEWARE_CLASSES += ('geonode.contrib.monitoring.middleware.MonitoringMiddleware',)
      MONITORING_SERVICE_NAME = 'local-system-geonode' # or other name for your main geonode instance Service
      NOTIFICATION_ENABLED = True

* run ``manage.py migrate monitoring`` to apply db schema changes and insert initial data
* run ``manage.py updategeoip`` to fetch MaxMind's GeoIP database file. It will be written to path specified by `GEOIP_PATH` setting.
* add ``manage.py collect_metrics`` call to crontab.

Configuration
~~~~~~~~~~~~~

In order to have working monitoring, at least Service should be configured. Let's assume following deployment scenario:
    * there's one machine, ``geo01``
    * ``geo01`` hosts both GeoNode and GeoServer (including PostgreSQL). 
    * applications are served with nginx+uwsgi, on port 80, but they are reachable on ``localhost`` address.
    * GeoServer is served from ``/geoserver/`` path
    * GeoNode is served from ``/`` path

Here's step-by-step instruction how to create monitoring setup for deployment scenario:


1. Log in as admin, and go to admin section:

.. image:: ../../../img/monitoring/homepage-admin-link.png
   :alt: go to admin section

2. Go to **monitoring** section (or type ``/admin/monitoring/`` as a path in URL): 

.. image:: ../../../img/monitoring/admin-monitoring-section.png
   :alt: go to admin/monitoring section

3. Go to **Hosts**:

.. image:: ../../../img/monitoring/admin-monitoring-hosts-services-underline.png
   :alt: go to admin/monitoring/hosts section

4. Click on **Add host +**:

.. image:: ../../../img/monitoring/admin-monitoring-add-host.png
   :alt: add host

5. Enter following information:
   * **host**: `localhost`
   * **ip**: `127.0.0.1`
   Note, that **host** value is arbitrary. You can enter other name if you like.
   Don't forget to save.

.. image:: ../../../img/monitoring/admin-monitoring-host.png
   :alt: added host

6. Go to **Services**:

.. image:: ../../../img/monitoring/admin-monitoring-hosts-services-underline.png
   :alt: go to admin/monitoring/services section

7. Click on **Add service +**:

.. image:: ../../../img/monitoring/admin-monitoring-add-service.png
   :alt: add service

8. Enter following information:

   * **name**: `local-geonode`
   * **host**: `localhost`
   * **service type**: `geonode`

.. image:: ../../../img/monitoring/admin-monitoring-service-local-geonode.png
   :alt: add geonode service

9. Add another **Service** Enter following information:

   * **name**: `local-system-geonode`
   * **host**: `localhost`
   * **service type**: `hostgeonode`
   * **url**: `http://localhost/` (should point to GeoNode home page)

.. image:: ../../../img/monitoring/admin-monitoring-service-local-system-geonode.png
   :alt: add hostgeonode service

10. Add another **Service** and enter following information:

   * **name**: `local-geoserver`
   * **host**: `localhost`
   * **service type**: `geoserver`
   * **url**: `http://localhost/geoserver/` (should point to GeoServer home page)

.. image:: ../../../img/monitoring/admin-monitoring-service-local-geoserver.png
   :alt: add geoserver service


To summarize, following entries should be created in admin/monitoring:

* Host: ``localhost``, with ip: 127.0.0.1
* Service: ``local-geonode``:
   * host ``localhost``
   * type ``geonode``
* Service: ``local-geoserver``:
   * url ``http://localhost/geoserver/``
   * host ``localhost``
   * type ``geoserver``
* Service: ``local-system-geonode``
   * url ``http://localhost/``
   * host ``localhost``
   * type ``hostgeonode``

Usage
~~~~~

Monitoring interface is available for superusers only. It's available in profile menu:

.. image:: ../../../img/monitoring/homepage-monitoring-link.png
   :alt: monitoring link

Dashboard
+++++++++

Main view offers overview of recent situation in GeoNode deployment.

.. image:: ../../../img/monitoring/monitoring-dashboard.png
   :alt: monitoring dashboard


Top bar and indicators
++++++++++++++++++++++

.. figure:: ../../../img/monitoring/dashboard-indicators-ok.png
   :alt: indicators in ok state

With top bar buttons User can:

 * go back from nested interface elements (charts, alerts, errors)
 * select time window from which data will be aggregated and shown (last 10 minutes, last 1 hour, last day or last week from now)
 * see what's currently used time window
 * enable/disable autorefresh

Below there are four main health indicators:

 * aggregated **Health Check** information. 
    This element will be:

    * `green` if there is no alerts nor errors
    * `yellow` if there are alerts
    * `red` if there are errors
 
 * **Uptime** that shows GeoNode's system uptime.
 
 * **Alerts** shows number of notifications from defined checks. When clicked, Alerts box will show detailed information . See Notifications description for details.

 * **Errors** - shows how many errors were captured during request processing. When clicked, Errors box will show detailed list of captured errors. See Errros description for details.

.. figure:: ../../../img/monitoring/dashboard-indicators-errors.png
   :alt: indicators in ok state

Indicators in error state


Software Performance
++++++++++++++++++++

Software Performance view shows GeoServer web service statistics, for all requests monitored and detailed, OWS-specific, per service type (WMS, WFS, OCS etc).

.. image:: ../../../img/monitoring/dashboard-sw-performance.png

Clicking on

.. image:: ../../../img/monitoring/dashboard-sw-performance-charts-button.png
   :align: center

will show charts with data history for overall performance and per-OWS performance:

.. image:: ../../../img/monitoring/dashboard-sw-performance-chart.png


Hartware Performance
++++++++++++++++++++

Hardware performance box shows hardware usage statistics for selected host (monitored with any of hostgeonode or hostgeoserver type Service): % of CPU usage and average memory consumption. User can select from which host data will be presented.

.. image:: ../../../img/monitoring/dashboard-hw-performance.png

Clicking on

.. image:: ../../../img/monitoring/dashboard-hw-performance-charts-button.png
   :align: center

will show charts with data history for selected host and time period

.. image:: ../../../img/monitoring/dashboard-hw-performance-charts.png


Errors
++++++

Errors view will show list of captured errors in GeoNode and GeoServer. List contents is displayed for selected time window.

.. image:: ../../../img/monitoring/dashboard-errors-list.png

For each error, details are available:
 * error class, message and stack trace
 * basic request context (IP, path, user agent)

.. image:: ../../../img/monitoring/dashboard-error-details.png


Alerts
++++++

An alert is a descriptive information on situation when observed metric contains values outside allowed range (for example, response time is above 30 seconds, or no requests were served within last 30 minutes). Alerts are generated by notifications mechanism described below.

Alerts view will show list of alerts for current moment (alerts that were generated in past are not displayed here):

.. image:: ../../../img/monitoring/monitoring-alerts.png

Each alert contains more descriptive information what is wrong:

.. image:: ../../../img/monitoring/monitoring-alerts-unfolded.png

Notifications
+++++++++++++

Notification mechanism (not to be confused with notifications application in GeoNode) is a way to inform selected users about situations, where collected metric data would indicate a problem with deployment. Notifications are accessible from Alerts view:

.. image:: ../../../img/monitoring/monitoring-alerts-notification-link.png

There can be several notification configurations available.


.. image:: ../../../img/monitoring/dashboard-notifications-list.png

Each notification configuration contains two main elements:

 * list of email addressess which should be notified when alert is generated
 * list of checks (at least one check must be in invalid state to generate alert)

.. image:: ../../../img/monitoring/dashboard-notifications-config.png

User can add arbitrary number of emails. Email address doesn't need to point to user registered in GeoNode instance. If email provided doesn't belong to any of users, alert will be send as a regular email. If email provided can be associated with specific user, notifications application (and thus, notification settings for that user) will be used to send alert.

Integration with GeoHealthCheck
-------------------------------

GeoNode can also be easily monitored with external tools, like `GeoHealthCheck <http://geohealthcheck.org/>`_. See `Documentation on adding resources <http://docs.geohealthcheck.org/en/latest/admin.html#adding-resources>`_ for details.
