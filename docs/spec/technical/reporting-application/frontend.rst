Frontend Reporting Application
==============================

The frontend application should incorporate some fairly basic GeoExt components
in order to provide what is effectively a basic map viewer with a particularly
sophisticated "identify" tool.  Future iterations may provide "identify"
functionality for more complicated geometries, but for the current iteration we
are limited to point data.

.. seealso:: The functional specification for details about layout.

Custom Widgets
--------------

Grouped Layer Switcher
    The layer switcher for this application will need to present the layers
    grouped by an external criterion (similar to the categorized layer lists on
    the Data Page in the original CAPRA GeoNode application.)  A mapping of
    layers to categories will be provided by the server so that the layer
    switcher can perform this grouping automatically.

    There should be a single slider control influencing the transparency of the
    entire map.
    
    This switcher will support reordering of the groups, but not of the layers
    within those groups (within groups, layers are ordered by period length).

    Additionally, this layer switcher toggles *inclusion in the report* rather
    than visibility.  Visibility will be tied to a single toggle button which
    controls the display of all active layers as a single unit.

    This grouped layer switcher will take advantage of the ``LayerParamsNode``
    in GeoExt to toggle visibility of individual data layers without requiring
    actual Layer instances to accompany them.

    .. note::

        While the LayerParamsNode reduces client-side requirements by limiting
        the number of images and HTML elements required to display the map, it
        also means that we will be unable to use GWC for the layers, since it
        does not support multi-layer requests.

    .. seealso:: 

        :doc:`../reporting-application/category-application` for information 
        about the category handling extensions to the server.

Report Control
    Since the reporting is more complicated than just fetching some data and
    interpolating it into a template, a specialized control will have to be
    developed which makes the proper HTTP request to the WPS (or custom REST)
    service.
    
    Parameters that need to be sent to the server include:

        - Current zoom level
        - Point (later, geometry) of interest
        - Active layers for the report

    The request will be a POST to the Django reporting endpoint, with the
    following content in the request body::

        {
            "geometry": {  
                "type": "Feature", 
                "id": "OpenLayers.Feature.Vector_192", 
                "properties": {
                }, 
                "geometry": {
                    "type": "Point", 
                    "coordinates": [
                        84.375, 
                        -42.5390625
                    ]
                }, 
                "crs": {
                    "type": "OGC", 
                    "properties": {
                        "urn": "urn:ogc:def:crs:OGC:1.3:CRS84"
                    }
                }
            },
            "layers": ["hazard:COR_1.0s_1000y", "hazard:COR_1.0s_500y"],
            "scale": 27035.14663696289
        }

    .. note::

        The ``geometry`` property of the request will use the 
        `GeoJSON <http://geojson.org>`_ standard encoding.  GeoJSON can be 
        generated by OpenLayers automatically.

    .. seealso::

        :ref:`html-report` in the discussion of reporting output.


